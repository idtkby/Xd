-- Kiểm tra ID game
if game.PlaceId ~= 116387287343653 then
    return warn("Script only works in the specified game (ID: 116387287343653){悪夢の校舎 PETAPETA: School of nightmares}")
end

-- Thông báo khi đúng ID game
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "✓ Game Check Passed",
    Text = "Script is now executing...",
    Duration = 5
})

task.wait(1) -- Đợi 1s trước khi thực thi 

task.spawn(function()
-- Khai báo các dịch vụ cần thiết
local player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera

-- Tải và khởi tạo thư viện GUI Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Tạo cửa sổ giao diện chính
local Window = Rayfield:CreateWindow({
    Name = "Script By Khang [PETAPETA: School of Nightmares]",
    LoadingTitle = "Loading Hub...",
    LoadingSubtitle = "Please wait",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "MyHubFolder",
        FileName = "MyHubConfig"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = false
    },
    KeySystem = false,
})

-- Thông báo đã tải
Rayfield:Notify({
    Title = "Welcome!",
    Content = "Script Loaded",
    Duration = 2
})


-- Tạo hàm ESP chung
local function autoESP(filterFn, color, labelText)
	task.spawn(function()
		while true do
			for _, obj in ipairs(workspace:GetDescendants()) do
				if filterFn(obj) then
					if not obj:FindFirstChild("AutoESP") then
						local hl = Instance.new("Highlight")
						hl.Name = "AutoESP"
						hl.OutlineColor = color
						hl.OutlineTransparency = 0
						hl.FillTransparency = 1
						hl.Parent = obj
					end
					if not obj:FindFirstChild("ESPLabel") and obj:IsA("BasePart") then
						local bill = Instance.new("BillboardGui", obj)
						bill.Name = "ESPLabel"
						bill.Size = UDim2.new(0, 100, 0, 40)
						bill.StudsOffset = Vector3.new(0, 2, 0)
						bill.AlwaysOnTop = true
						local txt = Instance.new("TextLabel", bill)
						txt.Size = UDim2.new(1, 0, 1, 0)
						txt.BackgroundTransparency = 1
						txt.TextColor3 = color
						txt.TextStrokeTransparency = 0.5
						txt.Text = labelText or obj.Name
						txt.Font = Enum.Font.SourceSansSemibold
						txt.TextScaled = true
					end
				end
			end
			task.wait(5)
		end
	end)
end

-- Tab chính
local mainTab = Window:CreateTab("Visual", eye)

-- ESP Buttons
mainTab:CreateButton({
    Name = "Esp Player",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/Xd/main/PlayerEsp"))()
    end,
})

mainTab:CreateButton({
	Name = "Esp PetaPeta",
	Callback = function()
		loadstring(game:HttpGet("https://protected-roblox-scripts.onrender.com/4ff8c4ca4bd5179cd082f640899fc8f3"))()
	end,
})

mainTab:CreateButton({
	Name = "Esp Key",
	Callback = function()
		task.spawn(function()
	local espColor = Color3.fromRGB(255, 255, 255)
	local outlineColor = Color3.fromRGB(0, 0, 0)

	local function createESP(obj)
		if obj:FindFirstChild("ExitKeyESP") then return end

		local part = obj:IsA("BasePart") and obj or obj:FindFirstChildWhichIsA("BasePart")
		if not part then return end

		-- Billboard
		local billboard = Instance.new("BillboardGui")
		billboard.Name = "ExitKeyESP"
		billboard.AlwaysOnTop = true
		billboard.Size = UDim2.new(0, 100, 0, 40)
		billboard.StudsOffset = Vector3.new(0, 2, 0)
		billboard.MaxDistance = math.huge
		billboard.Parent = part

		local textLabel = Instance.new("TextLabel")
		textLabel.Parent = billboard
		textLabel.Text = "Key"
		textLabel.TextColor3 = espColor
		textLabel.TextStrokeColor3 = outlineColor
		textLabel.TextStrokeTransparency = 0
		textLabel.BackgroundTransparency = 1
		textLabel.Size = UDim2.new(1, 0, 1, 0)
		textLabel.Font = Enum.Font.Bodoni
		textLabel.TextScaled = true

		-- Highlight
		local highlight = Instance.new("Highlight")
		highlight.Name = "ExitKeyESP"
		highlight.FillTransparency = 1
		highlight.OutlineTransparency = 0
		highlight.OutlineColor = espColor
		highlight.Parent = obj
	end

	local function checkAll()
		for _, obj in ipairs(workspace:GetDescendants()) do
			if obj:IsA("Model") and obj.Name == "ExitKey" then
				createESP(obj)
			elseif obj:IsA("BasePart") and obj.Name == "ExitKey" then
				createESP(obj)
			end
		end
	end

	workspace.DescendantAdded:Connect(function(descendant)
		if descendant:IsA("Model") and descendant.Name == "ExitKey" then
			task.wait(0.1)
			createESP(descendant)
		elseif descendant:IsA("BasePart") and descendant.Name == "ExitKey" then
			task.wait(0.1)
			createESP(descendant)
		end
	end)

	checkAll()
end)
	end,
})

mainTab:CreateButton({
	Name = "Esp (Soon...)",
	Callback = function()
		autoESP(function(p)
			return p:IsA("BasePart") and p.Name == "wait"
		end, Color3.fromRGB(255, 52, 52), "wait")
	end,
})












local KTab = Window:CreateTab("Misc", "package")
KTab:CreateSection("Game")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local AutoZeniRunning = false
local ZeniConnection
local ZeniList = {}

KTab:CreateToggle({
	Name = "Auto Collect Cursed Shard",
	CurrentValue = false,
	Callback = function(state)
		AutoZeniRunning = state
		if state then
			local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
			local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
			local lastTriggerTime = {}

			local function scanZeni()
				ZeniList = {}
				for _, obj in ipairs(workspace:GetDescendants()) do
					if (obj:IsA("ProximityPrompt") or obj:IsA("ClickDetector") or obj.Name == "TouchInterest") and not obj:IsDescendantOf(LocalPlayer.Character) then
						local model = obj:FindFirstAncestorWhichIsA("Model")
						if model and model.Name:match("^Zeni_[1-3]$") then
							table.insert(ZeniList, {model = model, obj = obj})
						end
					end
				end
			end

			scanZeni()
			workspace.DescendantAdded:Connect(function(desc)
				if AutoZeniRunning and (desc:IsA("ProximityPrompt") or desc:IsA("ClickDetector") or desc.Name == "TouchInterest") then
					local model = desc:FindFirstAncestorWhichIsA("Model")
					if model and model.Name:match("^Zeni_[1-3]$") then
						table.insert(ZeniList, {model = model, obj = desc})
					end
				end
			end)

			local function triggerPrompt(obj)
				if not obj or not obj:IsDescendantOf(workspace) then return false end
				local success = false
				pcall(function()
					if obj:IsA("ProximityPrompt") then
						fireproximityprompt(obj, math.huge)
						success = true
					elseif obj:IsA("ClickDetector") then
						fireclickdetector(obj)
						success = true
					elseif obj:IsA("TouchTransmitter") or obj.Name == "TouchInterest" then
						local part = obj.Parent
						if part and part:IsA("BasePart") then
							firetouchinterest(HumanoidRootPart, part, 0)
							task.wait()
							firetouchinterest(HumanoidRootPart, part, 1)
							success = true
						end
					end
				end)
				return success
			end

			local function getClosestPart(model, refPos)
				local closest, minDist = nil, math.huge
				for _, part in ipairs(model:GetChildren()) do
					if part:IsA("BasePart") then
						local dist = (part.Position - refPos).Magnitude
						if dist < minDist then
							minDist = dist
							closest = part
						end
					end
				end
				return closest, minDist
			end

			ZeniConnection = RunService.Heartbeat:Connect(function()
				if not AutoZeniRunning or not LocalPlayer.Character then return end
				local HRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
				if not HRP then return end

				local now = tick()
				for i = #ZeniList, 1, -1 do
					local data = ZeniList[i]
					local model = data.model
					local obj = data.obj

					if not model or not model:IsDescendantOf(workspace) or not obj or not obj:IsDescendantOf(model) then
						table.remove(ZeniList, i)
						continue
					end

					if lastTriggerTime[model] and now - lastTriggerTime[model] < 2 then
						continue
					end

					local _, dist = getClosestPart(model, HRP.Position)
					if dist and dist <= 5 then
						local success = triggerPrompt(obj)
						if success then
							lastTriggerTime[model] = now
						else
							table.remove(ZeniList, i)
						end
					end
				end
			end)
		else
			if ZeniConnection then
				ZeniConnection:Disconnect()
				ZeniConnection = nil
			end
			ZeniList = {}
		end
	end
})

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local AutoKeyRunning = false
local KeyConnection
local KeyList = {}

KTab:CreateToggle({
	Name = "Auto Collect Key",
	CurrentValue = false,
	Callback = function(state)
		AutoKeyRunning = state
		if state then
			local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
			local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
			local lastTriggerTime = {}

			local function scanKeys()
				KeyList = {}
				for _, obj in ipairs(workspace:GetDescendants()) do
					if (obj:IsA("ProximityPrompt") or obj:IsA("ClickDetector") or obj.Name == "TouchInterest") and not obj:IsDescendantOf(LocalPlayer.Character) then
						local model = obj:FindFirstAncestorWhichIsA("Model")
						if model and model.Name == "ExitKey" then
							table.insert(KeyList, {model = model, obj = obj})
						end
					end
				end
			end

			scanKeys()
			workspace.DescendantAdded:Connect(function(desc)
				if AutoKeyRunning and (desc:IsA("ProximityPrompt") or desc:IsA("ClickDetector") or desc.Name == "TouchInterest") then
					local model = desc:FindFirstAncestorWhichIsA("Model")
					if model and model.Name == "ExitKey" then
						table.insert(KeyList, {model = model, obj = desc})
					end
				end
			end)

			local function triggerPrompt(obj)
				if not obj or not obj:IsDescendantOf(workspace) then return false end
				local success = false
				pcall(function()
					if obj:IsA("ProximityPrompt") then
						fireproximityprompt(obj, math.huge)
						success = true
					elseif obj:IsA("ClickDetector") then
						fireclickdetector(obj)
						success = true
					elseif obj:IsA("TouchTransmitter") or obj.Name == "TouchInterest" then
						local part = obj.Parent
						if part and part:IsA("BasePart") then
							firetouchinterest(HumanoidRootPart, part, 0)
							task.wait()
							firetouchinterest(HumanoidRootPart, part, 1)
							success = true
						end
					end
				end)
				return success
			end

			local function getClosestPart(model, refPos)
				local closest, minDist = nil, math.huge
				for _, part in ipairs(model:GetChildren()) do
					if part:IsA("BasePart") then
						local dist = (part.Position - refPos).Magnitude
						if dist < minDist then
							minDist = dist
							closest = part
						end
					end
				end
				return closest, minDist
			end

			KeyConnection = RunService.Heartbeat:Connect(function()
				if not AutoKeyRunning or not LocalPlayer.Character then return end
				local HRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
				if not HRP then return end

				local now = tick()
				for i = #KeyList, 1, -1 do
					local data = KeyList[i]
					local model = data.model
					local obj = data.obj

					if not model or not model:IsDescendantOf(workspace) or not obj or not obj:IsDescendantOf(model) then
						table.remove(KeyList, i)
						continue
					end

					if lastTriggerTime[model] and now - lastTriggerTime[model] < 2 then
						continue
					end

					local _, dist = getClosestPart(model, HRP.Position)
					if dist and dist <= 3 then
						local success = triggerPrompt(obj)
						if success then
							lastTriggerTime[model] = now
						else
							table.remove(KeyList, i)
						end
					end
				end
			end)
		else
			if KeyConnection then
				KeyConnection:Disconnect()
				KeyConnection = nil
			end
			KeyList = {}
		end
	end
})

local HumanModCons = {}  
local Camera = workspace.CurrentCamera
local DefaultFOV = Camera.FieldOfView
local TargetFOV = 104

KTab:CreateToggle({  
	Name = "Inf Sprint",  
	CurrentValue = false,  
	Flag = "SpeedToggle",  
	Callback = function(state)  
		local speaker = game.Players.LocalPlayer  
		local function isNumber(val)  
			return typeof(val) == "number" and val == val and val ~= math.huge and val ~= -math.huge  
		end  
  
		if state then  
			-- Đặt FOV mục tiêu  
			Camera.FieldOfView = TargetFOV

			-- Giữ FOV cố định nếu bị thay đổi  
			HumanModCons.fovChanged = Camera:GetPropertyChangedSignal("FieldOfView"):Connect(function()  
				if Camera.FieldOfView ~= TargetFOV then  
					Camera.FieldOfView = TargetFOV  
				end  
			end)

			local args = { true, 15.5 }  
			local speed = args[1] or 16  
			if args[2] then  
				speed = args[2]  
			end  
  
			if isNumber(speed) then  
				local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)  
				local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")  
  
				local function WalkSpeedChange()  
					if Char and Human then  
						Human.WalkSpeed = speed  
					end  
				end  
  
				WalkSpeedChange()  
  
				HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false)  
					or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)  
  
				HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false)  
					or speaker.CharacterAdded:Connect(function(nChar)  
						Char, Human = nChar, nChar:WaitForChild("Humanoid")  
						WalkSpeedChange()  
						HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false)  
							or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)  
					end)  
			end  
		else  
			-- Trả lại FOV ban đầu khi tắt  
			Camera.FieldOfView = DefaultFOV

			-- Ngắt kết nối giữ FOV  
			if HumanModCons.fovChanged then  
				HumanModCons.fovChanged:Disconnect()  
				HumanModCons.fovChanged = nil  
			end

			HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or nil  
			HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or nil  
		end  
	end  
})

KTab:CreateSection("Player")

local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local speaker = Players.LocalPlayer
local flyjump

KTab:CreateToggle({
        Name = "Inf Jump",
        CurrentValue = false,
        Flag = "InfJumpToggle",
        Callback = function(state)
                if flyjump then
                        flyjump:Disconnect()
                        flyjump = nil
                end

                if state then
                        flyjump = UserInputService.JumpRequest:Connect(function()
                                local humanoid = speaker.Character and speaker.Character:FindFirstChildWhichIsA("Humanoid")
                                if humanoid then
                                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                                end
                        end)
                end
        end
})

-- Khai báo các dịch vụ cần thiết
local PromptService = game:GetService("ProximityPromptService")
local Workspace = game:GetService("Workspace")

-- Tạo Toggle để kích hoạt và tắt chức năng Instant Prompt
local InstantPromptToggle = KTab:CreateToggle({
    Name = "Instant interact",
    CurrentValue = false,  -- Mặc định tắt
    Callback = function(enabled)
        if enabled then
            -- Khi toggle bật, thiết lập tất cả ProximityPrompt có HoldDuration = 0
            for _, v in ipairs(Workspace:GetDescendants()) do
                if v:IsA("ProximityPrompt") then
                    v.HoldDuration = 0
                end
            end

            -- Tự động thiết lập HoldDuration = 0 khi có Prompt mới bắt đầu
            PromptService.PromptButtonHoldBegan:Connect(function(prompt)
                if prompt:IsA("ProximityPrompt") then
                    prompt.HoldDuration = 0
                end
            end)

            Rayfield:Notify({
                Title = "Instant Prompt Enabled",
                Content = "All proximity prompts now require no hold duration.",
                Duration = 2
            })
        else
            -- Khi toggle tắt, không thay đổi gì
            Rayfield:Notify({
                Title = "Instant Prompt Disabled",
                Content = "Proximity prompts will use default hold duration.",
                Duration = 2
            })
        end
    end,
})

local HumanModCons = {}

KTab:CreateToggle({
	Name = "Fast Speed",
	CurrentValue = false,
	Flag = "SpeedToggle",
	Callback = function(state)
		local speaker = game.Players.LocalPlayer
		local function isNumber(val)
			return typeof(val) == "number" and val == val and val ~= math.huge and val ~= -math.huge
		end

		if state then
			Rayfield:Notify({
				Title = "Note",
				Content = "Collecting while walking can cause a prompt error, causing the prompt to fail",
				Duration = 4,
				Image = 6026568198,
			})

			local args = { true, 30 }
			local speed = args[1] or 16
			if args[2] then
				speed = args[2]
			end

			if isNumber(speed) then
				local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
				local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")

				local function WalkSpeedChange()
					if Char and Human then
						Human.WalkSpeed = speed
					end
				end

				WalkSpeedChange()

				HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false)
					or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)

				HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false)
					or speaker.CharacterAdded:Connect(function(nChar)
						Char, Human = nChar, nChar:WaitForChild("Humanoid")
						WalkSpeedChange()
						HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false)
							or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)
					end)
			end
		else
			HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or nil
			HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or nil
		end
	end
})

-- Hàm lấy RootPart an toàn
local function getRoot(char)
	return char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso")
end

KTab:CreateToggle({
	Name = "Ambient Light",
	Default = false,
	Callback = function(state)
		local char = speaker.Character or speaker.CharacterAdded:Wait()
		if not char then return end

		local root = getRoot(char)
		if not root then return end

		if state then
			if not root:FindFirstChild("AmbientLight") then
				local light = Instance.new("PointLight")
				light.Name = "AmbientLight"
				light.Parent = root
				light.Range = 100
				light.Brightness = 0.3
				light.Color = Color3.fromRGB(255, 255, 255) -- Có thể chỉnh màu
			end
		else
			local existing = root:FindFirstChild("AmbientLight")
			if existing then
				existing:Destroy()
			end
		end
	end
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local jumpGui

KTab:CreateToggle({
    Name = "Show Jump Button",
    CurrentValue = false,
    Callback = function(state)
        if state then
            -- Nếu GUI đã tồn tại thì không tạo nữa
            if jumpGui and jumpGui.Parent then
                jumpGui.Enabled = true
                return
            end

            -- Tạo GUI mới
            jumpGui = Instance.new("ScreenGui")
            jumpGui.Name = "JumpButtonGui"
            jumpGui.ResetOnSpawn = false
            jumpGui.IgnoreGuiInset = true
            jumpGui.Parent = game:GetService("CoreGui")

            local outer = Instance.new("Frame")
            outer.Size = UDim2.new(0, 117 * 1.3, 0, 117 * 1.29)
            outer.Position = UDim2.new(0, 1034 - ((117 * 1.29 - 117)/2), 0, 388 - ((117 * 1.29 - 117)/2))
            outer.BackgroundColor3 = Color3.new(0, 0, 0)
            outer.BackgroundTransparency = 1
            outer.Parent = jumpGui

            local outerCorner = Instance.new("UICorner")
            outerCorner.CornerRadius = UDim.new(1, 0)
            outerCorner.Parent = outer

            local inner = Instance.new("Frame")
            inner.Size = UDim2.new(0, 99 * 1.3, 0, 99 * 1.29)
            inner.Position = UDim2.new(0, 9 * 1.3, 0, 9 * 1.29)
            inner.BackgroundColor3 = Color3.new(0, 0, 0)
            inner.BackgroundTransparency = 1
            inner.Parent = outer

            local innerCorner = Instance.new("UICorner")
            innerCorner.CornerRadius = UDim.new(1, 0)
            innerCorner.Parent = inner

            local stroke = Instance.new("UIStroke")
            stroke.Thickness = 4
            stroke.Color = Color3.new(1, 1, 1)
            stroke.Transparency = 1
            stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            stroke.Parent = inner

            local btn = Instance.new("ImageButton")
            btn.Size = UDim2.new(1, 0, 1, 0)
            btn.BackgroundTransparency = 1
            btn.Image = "rbxasset://textures/ui/Input/TouchControlsSheetV2.png"
            btn.ImageRectOffset = Vector2.new(1, 146)
            btn.ImageRectSize = Vector2.new(144, 144)
            btn.Parent = inner

            local flag = Instance.new("StringValue")
            flag.Name = "ButtonType"
            flag.Value = "Jump"
            flag.Parent = btn

            local holding = false

            local function jumpLoop()
                while holding do
                    local char = LocalPlayer.Character
                    local hum = char and char:FindFirstChildWhichIsA("Humanoid")
                    if hum and hum:GetState() ~= Enum.HumanoidStateType.Jumping and hum:GetState() ~= Enum.HumanoidStateType.Freefall then
                        hum:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                    task.wait(0.2)
                end
            end

            btn.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if not holding then
                        holding = true
                        task.spawn(jumpLoop)
                    end
                end
            end)

            btn.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
                    holding = false
                end
            end)

        else
            if jumpGui then
                jumpGui:Destroy()
                jumpGui = nil
            end
        end
    end
})

KTab:CreateSection("Other")
  
KTab:CreateButton({
    Name = "interact aura",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/Xd/refs/heads/main/CollectAura"))()
    end,
})
  
  KTab:CreateButton({
    Name = "Inf Yield Edit",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/Xd/refs/heads/main/infedit"))()
    end,
  })

end)
