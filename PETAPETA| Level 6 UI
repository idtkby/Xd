-- Ki·ªÉm tra ID game
if game.PlaceId ~= 14476003462 then
    return warn("Script only works in the specified game (ID: 14476003462){PETAPETA | Level6 (ÁÑ°ÈôêÊóÖÈ§®)}")
end

-- Th√¥ng b√°o khi ƒë√∫ng ID game
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "‚úì Game Check Passed",
    Text = "Script is now executing...",
    Duration = 5
})

task.wait(1) -- ƒê·ª£i 1s tr∆∞·ªõc khi th·ª±c thi 

task.spawn(function()
print("----    ---- ----    ----    ------    ----    ---- ------------ ") print("****   ****  ****    ****   ********   *****   **** ************ ") print("----  ----   ----    ----  ----------  ------  ---- ----         ") print("*********    ************ ****    **** ************ ****  ****** ") print("---------    ------------ ------------ ------------ ----  ------ ") print("****  ****   ****    **** ************ ****  ****** ****    **** ") print("----   ----  ----    ---- ----    ---- ----   ----- ------------ ") print("****    **** ****    **** ****    **** ****    **** ************ ")                                                                  
end)

task.spawn(function()
-- Khai b√°o c√°c d·ªãch v·ª• c·∫ßn thi·∫øt
local player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera

-- T·∫£i v√† kh·ªüi t·∫°o th∆∞ vi·ªán GUI Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- T·∫°o c·ª≠a s·ªï giao di·ªán ch√≠nh
local Window = Rayfield:CreateWindow({
    Name = "Script By IgnahK [PETAPETA {ÁÑ°ÈôêÊóÖÈ§®}]",
    LoadingTitle = "Loading Script...",
    LoadingSubtitle = "Please wait",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "MyHubFolder",
        FileName = "MyHubConfig"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = false
    },
    KeySystem = false,
})

-- Th√¥ng b√°o ƒë√£ t·∫£i
Rayfield:Notify({
    Title = "Welcome!",
    Content = "Script Loaded",
    Duration = 2
})


-- T·∫°o h√†m ESP chung
local function autoESP(filterFn, color, labelText)
	task.spawn(function()
		while true do
			for _, obj in ipairs(workspace:GetDescendants()) do
				if filterFn(obj) then
					if not obj:FindFirstChild("AutoESP") then
						local hl = Instance.new("Highlight")
						hl.Name = "AutoESP"
						hl.OutlineColor = color
						hl.OutlineTransparency = 0
						hl.FillTransparency = 1
						hl.Parent = obj
					end
					if not obj:FindFirstChild("ESPLabel") and obj:IsA("BasePart") then
						local bill = Instance.new("BillboardGui", obj)
						bill.Name = "ESPLabel"
						bill.Size = UDim2.new(0, 100, 0, 40)
						bill.StudsOffset = Vector3.new(0, 2, 0)
						bill.AlwaysOnTop = true
						local txt = Instance.new("TextLabel", bill)
						txt.Size = UDim2.new(1, 0, 1, 0)
						txt.BackgroundTransparency = 1
						txt.TextColor3 = color
						txt.TextStrokeTransparency = 0.5
						txt.Text = labelText or obj.Name
						txt.Font = Enum.Font.Bodoni
						txt.TextScaled = true
					end
				end
			end
			task.wait(5)
		end
	end)
end
--[[ -- example
mainTab:CreateButton({
	Name = "Esp Box",
	Callback = function()
		autoESP(function(p)
			return p:IsA("BasePart") and p.Name == "BoxBottom"
		end, Color3.fromRGB(0, 255, 0), "Box")
	end,
})
]]

-- Tab ch√≠nh
local V1 = Window:CreateTab("Visual [Chapter 1]", "eye")

-- ESP Buttons
V1:CreateButton({
	Name = "Esp PetaPeta",
	Callback = function()
	task.spawn(function()
	local espColor = Color3.fromRGB(255, 133, 145) -- M√†u ch·ªØ + Highlight
	local outlineColor = Color3.fromRGB(0, 0, 0)   -- Vi·ªÅn ch·ªØ + vi·ªÅn highlight

	local function createESP(item)
		if item:FindFirstChild("EnemyESP") or item:FindFirstChild("ESPHighlight") then return end

		-- BillboardGui
		local billboard = Instance.new("BillboardGui")
		billboard.Name = "EnemyESP"
		billboard.AlwaysOnTop = true
		billboard.Size = UDim2.new(0, 100, 0, 40)
		billboard.StudsOffset = Vector3.new(0, 2, 0)
		billboard.MaxDistance = math.huge
		billboard.Parent = item

		local textLabel = Instance.new("TextLabel")
		textLabel.Parent = billboard
		textLabel.Text = "Peta Peta"
		textLabel.TextColor3 = espColor
		textLabel.TextStrokeColor3 = outlineColor
		textLabel.TextStrokeTransparency = 0
		textLabel.BackgroundTransparency = 1
		textLabel.Size = UDim2.new(1, 0, 1, 0)
		textLabel.Font = Enum.Font.Bodoni
		textLabel.TextScaled = true

		-- Highlight
		local hl = Instance.new("Highlight")
		hl.Name = "ESPHighlight"
		hl.FillColor = espColor
		hl.FillTransparency = 0.5
		hl.OutlineColor = outlineColor
		hl.OutlineTransparency = 0
		hl.Adornee = item
		hl.Parent = item
	end

	local function isEnemyModel(model)
		return model:IsA("Model") and (model.Name == "EnemyModel" or model.Name == "EnemyModel_Stage6")
	end

	local function checkExisting()
		for _, item in ipairs(workspace:GetDescendants()) do
			if isEnemyModel(item) then
				createESP(item)
			end
		end
	end

	workspace.DescendantAdded:Connect(function(descendant)
		if isEnemyModel(descendant) then
			createESP(descendant)
		end
	end)

	checkExisting()
end)
task.spawn(function()
	local StarterGui = game:GetService("StarterGui")
	local Workspace = game:GetService("Workspace")
	local SoundService = game:GetService("SoundService")

	-- Th√¥ng b√°o kh·ªüi ƒë·ªông
	pcall(function()
		StarterGui:SetCore("SendNotification", {
			Title = "PETAPETA Notice",
			Text = "Loading ...",
			Duration = 5,
			Icon = "rbxassetid://83439791036389"
		})
	end)

	-- √Çm thanh c·∫£nh b√°o khi xu·∫•t hi·ªán
	local alertSound = Instance.new("Sound")
	alertSound.Name = "EnemyAlert"
	alertSound.SoundId = "rbxassetid://9118823102"
	alertSound.Volume = 2
	alertSound.Looped = false
	alertSound.Parent = SoundService

	local function sendNotice(text)
		pcall(function()
			StarterGui:SetCore("SendNotification", {
				Title = "Notice",
				Text = text,
				Duration = 5,
				Icon = "rbxassetid://83439791036389"
			})
		end)
	end

	local currentEnemy -- ƒê·ªÉ theo d√µi enemy hi·ªán t·∫°i

	local function monitorEnemy(enemyModel)
		if currentEnemy == enemyModel then return end
		currentEnemy = enemyModel

		alertSound:Play()
		sendNotice("Hide, Run or Pvp")

		local conn
		conn = enemyModel.AncestryChanged:Connect(function(_, parent)
			if not parent then
				sendNotice("PETAPETA-Sama disappeared")
				if conn then conn:Disconnect() end
				currentEnemy = nil
			end
		end)
	end

	-- Ki·ªÉm tra t·ªìn t·∫°i s·∫µn
	for _, v in ipairs(Workspace:GetDescendants()) do
		if v:IsA("Model") and v.Name == "Enemy_Model" then
			monitorEnemy(v)
			break
		end
	end

	-- Theo d√µi spawn m·ªõi
	Workspace.DescendantAdded:Connect(function(obj)
		if obj:IsA("Model") and obj.Name == "Enemy_Model" then
			monitorEnemy(obj)
		end
	end)
end)
	end,
})


local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local activeESPList = {}
local espObjects = {}

-- ‚öôÔ∏è Danh s√°ch c√°c nh√≥m ESP
local espGroups = {
	{
		label = "Safe",
		objects = {
			["Meshes/safe_Safe"] = {label = "Safe", color = Color3.fromRGB(255, 255, 0)},
			DialGimmick = {label = "Safe", color = Color3.fromRGB(255, 255, 0)}
		}
	},
	{
		label = "Box",
		objects = {
			BoxBottom = {label = "Box", color = Color3.fromRGB(0,255,0)}
		}
	},
	-- Th√™m c√°c nh√≥m kh√°c ·ªü ƒë√¢y n·∫øu mu·ªën...
 	{
		label = "Doll",
		objects = {
			DollBlackHead = {label = "Doll", color = Color3.fromRGB(255,255,255)},
			DollHead = {label = "Doll", color = Color3.fromRGB(245,245,245)}
		}
	},
	{
		label = "Key",
		objects = {
			Key = {label = "Key", color = Color3.fromRGB(150, 150, 150)}
		}
	},
	{
		label = "Lighter",
		objects = {
			Lighter = {label = "Lighter", color = Color3.fromRGB(84, 220, 0)}
		}
	},
	{
		label = "Plate",
		objects = {
			Dish = {label = "Plate", color = Color3.fromRGB(255, 223, 178)}
		}
	},
	{
		label = "SafeCode",
		objects = {
			HintPaper = {label = "SafeCode", color = Color3.fromRGB(0,255,255)},
			TelevisionW = {label = "SafeCode", color = Color3.fromRGB(0,255,255)}
		}
	},
	{
		label = "Room (Stage 5)",
		objects = {
			["dirty sheet"] = {label = "Room", color = Color3.fromRGB(255,105,0)}
		}
	},
	{
		label = "Candle",
		objects = {
			KeyCandle1 = {label = "Candle1", color = Color3.fromRGB(179, 0, 56)},
			KeyCandle2 = {label = "Candle2", color = Color3.fromRGB(179, 0, 56)},
			KeyCandle3 = {label = "Candle3", color = Color3.fromRGB(179, 0, 56)},
			Keycandle4 = {label = "Candle4", color = Color3.fromRGB(179, 0, 56)}
		}
	},
}

-- üß± T·∫°o Billboard ESP
local function createESP(item, text, color)
	if espObjects[item] then return end

	local part = item:IsA("Model") and (item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")) or item
	if not part or not part:IsA("BasePart") then return end

	-- Billboard ESP
	local gui = Instance.new("BillboardGui")
	gui.Name = "ItemESP"
	gui.AlwaysOnTop = true
	gui.Size = UDim2.new(0, 100, 0, 40)
	gui.StudsOffset = Vector3.new(0, 2, 0)
	gui.MaxDistance = 500
	gui.Adornee = part
	gui.Parent = part

	local label = Instance.new("TextLabel", gui)
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(1, 0, 1, 0)
	label.Text = text
	label.TextColor3 = color
	label.Font = Enum.Font.Bodoni
	label.TextStrokeColor3 = Color3.new(0, 0, 0)
	label.TextStrokeTransparency = 0
	label.TextSize = 20

	-- Highlight (Outline)
	local hl = Instance.new("Highlight")
	hl.Adornee = item:IsA("Model") and item or part
	hl.FillColor = Color3.new(0, 0, 0)
	hl.FillTransparency = 1 -- ch·ªâ vi·ªÅn ngo√†i
	hl.OutlineColor = color
	hl.OutlineTransparency = 0
	hl.Parent = part

	espObjects[item] = {gui = gui, label = label, highlight = hl}
end

-- üóëÔ∏è Xo√° ESP
local function removeESP(item)
	local data = espObjects[item]
	if data then
		if data.gui then data.gui:Destroy() end
		if data.highlight then data.highlight:Destroy() end
		espObjects[item] = nil
	end
end

-- üîÅ C·∫≠p nh·∫≠t TextSize theo kho·∫£ng c√°ch
RunService.RenderStepped:Connect(function()
	for item, data in pairs(espObjects) do
		local name = item.Name
		local found = false
		for _, group in ipairs(espGroups) do
			if activeESPList[group.label] and group.objects[name] then
				local pos = (item:IsA("Model") and item:GetPivot().Position) or (item:IsA("BasePart") and item.Position)
				local dist = (Camera.CFrame.Position - pos).Magnitude
				data.label.TextSize = math.clamp(25 * (1 - dist / 200), 10, 25)
				found = true
				break
			end
		end
		if not found then
			removeESP(item)
		end
	end
end)

-- üëÅÔ∏è Theo d√µi object m·ªõi ƒë∆∞·ª£c th√™m
Workspace.DescendantAdded:Connect(function(obj)
	local name = obj.Name
	for _, group in ipairs(espGroups) do
		if activeESPList[group.label] and group.objects[name] then
			task.wait(0.05)
			createESP(obj, group.objects[name].label, group.objects[name].color)
		end
	end
end)

-- üîò T·∫°o toggle ri√™ng cho t·ª´ng nh√≥m
for _, group in ipairs(espGroups) do
	V1:CreateToggle({
		Name = "ESP: " .. group.label,
		CurrentValue = false,
		Callback = function(state)
			activeESPList[group.label] = state

			if not state then
				for obj in pairs(espObjects) do
					if group.objects[obj.Name] then
						removeESP(obj)
					end
				end
			else
				for _, obj in ipairs(Workspace:GetDescendants()) do
					if group.objects[obj.Name] and not espObjects[obj] then
						createESP(obj, group.objects[obj.Name].label, group.objects[obj.Name].color)
					end
				end
			end
		end
	})
end



V1:CreateButton({
    Name = "Esp Player",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/Xd/main/PlayerEsp"))()
    end,
})







local V2 = Window:CreateTab("Visual [Chapter 2]", "eye")
V2:CreateSection("Soon...")














local KTab = Window:CreateTab("Misc", "package")
KTab:CreateSection("Game")

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local AutoPickupRunning = false
local PickupConnection
local ItemList = {}

local targetNames = {
	["KeyCandle1"] = true,
	["KeyCandle2"] = true,
	["KeyCandle3"] = true,
	["KeyCandle4"] = true,
	["Dish"] = true,
	["Lighter"] = true,
 ["Rope"] = true,
	["Key"] = true,
	["OldPhoto"] = true,
 ["DollBlue"] = true,
 ["DollWhite"] = true,
 ["DollYellow"] = true,
 ["DollRed"] = true,
	["DollBlackHead"] = false,
 ["FireExtinguisher"] = true,
 ["BoxBottom"] = true,
 ["Ofuda"] = true,
}

KTab:CreateToggle({
	Name = "Auto pick up items",
	CurrentValue = false,
	Callback = function(state)
		AutoPickupRunning = state
		if state then
			local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
			local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
			local lastTriggerTime = {}

			local function scanItems()
				ItemList = {}
				for _, obj in ipairs(workspace:GetDescendants()) do
					if (obj:IsA("ProximityPrompt") or obj:IsA("ClickDetector") or obj.Name == "TouchInterest") then
						local model = obj:FindFirstAncestorWhichIsA("Model")
						if model then
							for _, part in ipairs(model:GetDescendants()) do
								if part:IsA("BasePart") and targetNames[part.Name] then
									table.insert(ItemList, {model = model, obj = obj})
									break
								end
							end
						end
					end
				end
			end

			scanItems()

			workspace.DescendantAdded:Connect(function(desc)
				if not AutoPickupRunning then return end
				if (desc:IsA("ProximityPrompt") or desc:IsA("ClickDetector") or desc.Name == "TouchInterest") then
					local model = desc:FindFirstAncestorWhichIsA("Model")
					if model then
						for _, part in ipairs(model:GetDescendants()) do
							if part:IsA("BasePart") and targetNames[part.Name] then
								table.insert(ItemList, {model = model, obj = desc})
								break
							end
						end
					end
				end
			end)

			local function triggerPrompt(obj)
				pcall(function()
					if obj:IsA("ProximityPrompt") then
						fireproximityprompt(obj, math.huge)
					elseif obj:IsA("ClickDetector") then
						fireclickdetector(obj)
					elseif obj:IsA("TouchTransmitter") or obj.Name == "TouchInterest" then
						firetouchinterest(HumanoidRootPart, obj.Parent, 0)
						task.wait()
						firetouchinterest(HumanoidRootPart, obj.Parent, 1)
					end
				end)
			end

			local function getClosestPart(model, refPos)
				local closest, minDist = nil, math.huge
				for _, part in ipairs(model:GetDescendants()) do
					if part:IsA("BasePart") then
						local dist = (part.Position - refPos).Magnitude
						if dist < minDist then
							minDist = dist
							closest = part
						end
					end
				end
				return closest, minDist
			end

			PickupConnection = RunService.Heartbeat:Connect(function()
				if not AutoPickupRunning or not LocalPlayer.Character then return end
				local HRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
				if not HRP then return end

				local now = tick()
				for i = #ItemList, 1, -1 do
					local data = ItemList[i]
					local model = data.model
					local obj = data.obj
					if not model or not model:IsDescendantOf(workspace) then
						table.remove(ItemList, i)
						continue
					end

					if lastTriggerTime[model] and now - lastTriggerTime[model] < 2 then
						continue
					end

					local _, dist = getClosestPart(model, HRP.Position)
					if dist and dist <= 7 then
						lastTriggerTime[model] = now
						triggerPrompt(obj)
					end
				end
			end)
		else
			if PickupConnection then
				PickupConnection:Disconnect()
				PickupConnection = nil
			end
			ItemList = {}
		end
	end
})

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local AutoZeniRunning = false
local ZeniConnection
local ZeniList = {}

KTab:CreateToggle({
	Name = "Auto Collect Zeni",
	CurrentValue = false,
	Callback = function(state)
		AutoZeniRunning = state
		if state then
			local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
			local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
			local lastTriggerTime = {}

			-- C·∫≠p nh·∫≠t danh s√°ch Zeni khi c√≥ object m·ªõi v√†o Workspace
			local function scanZeni()
				ZeniList = {}
				for _, obj in ipairs(workspace:GetDescendants()) do
					if (obj:IsA("ProximityPrompt") or obj:IsA("ClickDetector") or obj.Name == "TouchInterest") and not obj:IsDescendantOf(LocalPlayer.Character) then
						local model = obj:FindFirstAncestorWhichIsA("Model")
						if model and model.Name:match("^Zeni_[1-3]$") then
							table.insert(ZeniList, {model = model, obj = obj})
						end
					end
				end
			end

			scanZeni()
			workspace.DescendantAdded:Connect(function(desc)
				if AutoZeniRunning and (desc:IsA("ProximityPrompt") or desc:IsA("ClickDetector") or desc.Name == "TouchInterest") then
					local model = desc:FindFirstAncestorWhichIsA("Model")
					if model and model.Name:match("^Zeni_[1-3]$") then
						table.insert(ZeniList, {model = model, obj = desc})
					end
				end
			end)

			local function triggerPrompt(obj)
				pcall(function()
					if obj:IsA("ProximityPrompt") then
						fireproximityprompt(obj, math.huge)
					elseif obj:IsA("ClickDetector") then
						fireclickdetector(obj)
					elseif obj:IsA("TouchTransmitter") or obj.Name == "TouchInterest" then
						firetouchinterest(HumanoidRootPart, obj.Parent, 0)
						task.wait()
						firetouchinterest(HumanoidRootPart, obj.Parent, 1)
					end
				end)
			end

			local function getClosestPart(model, refPos)
				local closest, minDist = nil, math.huge
				for _, part in ipairs(model:GetChildren()) do
					if part:IsA("BasePart") then
						local dist = (part.Position - refPos).Magnitude
						if dist < minDist then
							minDist = dist
							closest = part
						end
					end
				end
				return closest, minDist
			end

			ZeniConnection = RunService.Heartbeat:Connect(function()
				if not AutoZeniRunning or not LocalPlayer.Character then return end
				local HRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
				if not HRP then return end

				local now = tick()
				for i = #ZeniList, 1, -1 do
					local data = ZeniList[i]
					local model = data.model
					local obj = data.obj
					if not model or not model:IsDescendantOf(workspace) then
						table.remove(ZeniList, i)
						continue
					end

					if lastTriggerTime[model] and now - lastTriggerTime[model] < 2 then
						continue
					end

					local _, dist = getClosestPart(model, HRP.Position)
					if dist and dist <= 7 then
						lastTriggerTime[model] = now
						triggerPrompt(obj)
					end
				end
			end)
		else
			if ZeniConnection then
				ZeniConnection:Disconnect()
				ZeniConnection = nil
			end
			ZeniList = {}
		end
	end
})


KTab:CreateSection("Player")

-- Khai b√°o c√°c d·ªãch v·ª• c·∫ßn thi·∫øt
local PromptService = game:GetService("ProximityPromptService")
local Workspace = game:GetService("Workspace")

-- T·∫°o Toggle ƒë·ªÉ k√≠ch ho·∫°t v√† t·∫Øt ch·ª©c nƒÉng Instant Prompt
local InstantPromptToggle = KTab:CreateToggle({
    Name = "Instant interact",
    CurrentValue = false,  -- M·∫∑c ƒë·ªãnh t·∫Øt
    Callback = function(enabled)
        if enabled then
            -- Khi toggle b·∫≠t, thi·∫øt l·∫≠p t·∫•t c·∫£ ProximityPrompt c√≥ HoldDuration = 0
            for _, v in ipairs(Workspace:GetDescendants()) do
                if v:IsA("ProximityPrompt") then
                    v.HoldDuration = 0
                end
            end

            -- T·ª± ƒë·ªông thi·∫øt l·∫≠p HoldDuration = 0 khi c√≥ Prompt m·ªõi b·∫Øt ƒë·∫ßu
            PromptService.PromptButtonHoldBegan:Connect(function(prompt)
                if prompt:IsA("ProximityPrompt") then
                    prompt.HoldDuration = 0
                end
            end)

            Rayfield:Notify({
                Title = "Instant Prompt Enabled",
                Content = "All proximity prompts now require no hold duration.",
                Duration = 2
            })
        else
            -- Khi toggle t·∫Øt, kh√¥ng thay ƒë·ªïi g√¨
            Rayfield:Notify({
                Title = "Instant Prompt Disabled",
                Content = "Proximity prompts will use default hold duration.",
                Duration = 2
            })
        end
    end,
})

local HumanModCons = {}

KTab:CreateToggle({
	Name = "Fast Speed",
	CurrentValue = false,
	Flag = "SpeedToggle",
	Callback = function(state)
		local speaker = game.Players.LocalPlayer
		local function isNumber(val)
			return typeof(val) == "number" and val == val and val ~= math.huge and val ~= -math.huge
		end

		if state then
			local args = { true, 22 }
			local speed = args[1] or 16
			if args[2] then
				speed = args[2]
			end

			if isNumber(speed) then
				local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
				local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")

				local function WalkSpeedChange()
					if Char and Human then
						Human.WalkSpeed = speed
					end
				end

				WalkSpeedChange()

				HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false)
					or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)

				HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false)
					or speaker.CharacterAdded:Connect(function(nChar)
						Char, Human = nChar, nChar:WaitForChild("Humanoid")
						WalkSpeedChange()
						HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false)
							or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)
					end)
			end
		else
			HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or nil
			HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or nil
		end
	end
})

local HumanModCons = {}

KTab:CreateToggle({
	Name = "FastSp 16*2",
	CurrentValue = false,
	Flag = "SpeedToggle",
	Callback = function(state)
		local speaker = game.Players.LocalPlayer
		local function isNumber(val)
			return typeof(val) == "number" and val == val and val ~= math.huge and val ~= -math.huge
		end

		if state then
			local args = { true, 32 }
			local speed = args[1] or 16
			if args[2] then
				speed = args[2]
			end

			if isNumber(speed) then
				local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
				local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")

				local function WalkSpeedChange()
					if Char and Human then
						Human.WalkSpeed = speed
					end
				end

				WalkSpeedChange()

				HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false)
					or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)

				HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false)
					or speaker.CharacterAdded:Connect(function(nChar)
						Char, Human = nChar, nChar:WaitForChild("Humanoid")
						WalkSpeedChange()
						HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false)
							or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)
					end)
			end
		else
			HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or nil
			HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or nil
		end
	end
})

KTab:CreateSection("Other")
  
KTab:CreateButton({
    Name = "interact aura",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/Xd/refs/heads/main/CollectAura"))()
    end,
})
  
  KTab:CreateButton({
    Name = "Inf Yield Edit",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/Xd/refs/heads/main/infedit"))()
    end,
  })

end)

