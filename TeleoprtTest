task.spawn(function()
-- Khai báo các dịch vụ cần thiết
local player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera

-- Tải và khởi tạo thư viện GUI Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Tạo cửa sổ giao diện chính
local Window = Rayfield:CreateWindow({
    Name = "Khang Hub",
    LoadingTitle = "Loading Hub...",
    LoadingSubtitle = "Please wait",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "MyHubFolder",
        FileName = "MyHubConfig"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = false
    },
    KeySystem = false,
})

-- Thông báo đã tải
Rayfield:Notify({
    Title = "Welcome!",
    Content = "Script Loaded",
    Duration = 2
})
local HbTab = Window:CreateTab("Game", "map")

HbTab:CreateSection("Grow a Garden")
HbTab:CreateButton({
   Name = "Staging Game",
   Callback = function()
      local gameId = 91867617264223
      game:GetService("TeleportService"):Teleport(gameId)
   end
})

HbTab:CreateSection("Server")
-- Serverhop
HbTab:CreateButton({
	Name = "Server Hop",
	Callback = function()
		local servers = {}
		local success, res = pcall(function()
			return game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true")
		end)
		if success then
			local body = HttpService:JSONDecode(res)
			if body and body.data then
				for _, v in pairs(body.data) do
					if v.playing < v.maxPlayers and v.id ~= JobId then
						table.insert(servers, v.id)
					end
				end
			end
		end
		if #servers > 0 then
			TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], Player)
		else
			notify("Server Hop", "Server not found")
		end
	end
})

-- Low Server
HbTab:CreateButton({
	Name = "Low Server",
	Callback = function()
		local servers = {}
		local cursor = ""
		repeat
			local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. cursor
			local success, response = pcall(function()
				return HttpService:JSONDecode(game:HttpGet(url))
			end)
			if success and response and response.data then
				for _, server in ipairs(response.data) do
					if server.playing < server.maxPlayers and server.id ~= JobId then
						table.insert(servers, server)
					end
				end
				cursor = response.nextPageCursor or ""
			else
				cursor = nil
			end
			task.wait(1)
		until not cursor

		if #servers > 0 then
			table.sort(servers, function(a, b)
				return a.playing < b.playing
			end)
			TeleportService:TeleportToPlaceInstance(PlaceId, servers[1].id, Player)
		else
			notify("Low Server", "Server not found")
		end
	end
})

-- Rejoin
HbTab:CreateButton({
	Name = "Rejoin",
	Callback = function()
		if #Players:GetPlayers() <= 1 then
			Player:Kick("\nRejoining...")
			task.wait(1)
			TeleportService:Teleport(PlaceId, Player)
		else
			TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Player)
		end
	end
})



end)