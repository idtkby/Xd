-- Ki·ªÉm tra ID game
if game.PlaceId ~= 121308443347459 then
    return warn("Script only works in the specified game (ID: 121308443347459){7Days To Live (The Forest)}")
end

-- Th√¥ng b√°o khi ƒë√∫ng ID game
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "‚úì Game Check Passed",
    Text = "Script is now executing...",
    Duration = 5
})

task.wait(1) -- ƒê·ª£i 1s tr∆∞·ªõc khi th·ª±c thi 

task.spawn(function()
print("----    ---- ----    ----    ------    ----    ---- ------------ ") print("****   ****  ****    ****   ********   *****   **** ************ ") print("----  ----   ----    ----  ----------  ------  ---- ----         ") print("*********    ************ ****    **** ************ ****  ****** ") print("---------    ------------ ------------ ------------ ----  ------ ") print("****  ****   ****    **** ************ ****  ****** ****    **** ") print("----   ----  ----    ---- ----    ---- ----   ----- ------------ ") print("****    **** ****    **** ****    **** ****    **** ************ ")                                                                  
end)

task.spawn(function()
-- Khai b√°o c√°c d·ªãch v·ª• c·∫ßn thi·∫øt
local player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera

-- T·∫£i v√† kh·ªüi t·∫°o th∆∞ vi·ªán GUI Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- T·∫°o c·ª≠a s·ªï giao di·ªán ch√≠nh
local Window = Rayfield:CreateWindow({
    Name = "Script By IgnahK [The Forest]",
    LoadingTitle = "Loading Script...",
    LoadingSubtitle = "Please wait",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "MyHubFolder",
        FileName = "MyHubConfig"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = false
    },
    KeySystem = false,
})

-- Th√¥ng b√°o ƒë√£ t·∫£i
Rayfield:Notify({
    Title = "Welcome!",
    Content = "Script Loaded",
    Duration = 2
})

-- T·∫°o Tab Main
local MTab = Window:CreateTab("Main", "home")
MTab:CreateSection("Main")

  MTab:CreateButton({
    Name = "Aimbot",
    Callback = function()
      loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/Xd/refs/heads/main/Aimbot%20npc%207%20days"))()
    end,
  })

MTab:CreateButton({
Name = "Aimbot V2 [Strong Device]",
Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/7DayToLive/main/aimbot%20v2"))()
end,
})

local savedCFrame = nil

local function createAutoScrapToggle(tab, name)
	local isRunning = false

	tab:CreateToggle({
		Name = name,
		CurrentValue = false,
		Flag = name,
		Callback = function(state)
			local Players = game:GetService("Players")
			local lp = Players.LocalPlayer
			local char = lp.Character or lp.CharacterAdded:Wait()
			local hrp = char:WaitForChild("HumanoidRootPart")

			isRunning = state

			if not state then
				Rayfield:Notify({Title = name, Content = "Disabled", Duration = 2})
				task.delay(1, function()
					if hrp and savedCFrame then
						char:PivotTo(savedCFrame)
						savedCFrame = nil
						Rayfield:Notify({Title = name, Content = "Teleported back", Duration = 2})
					end
				end)
				return
			end

			savedCFrame = hrp.CFrame

			local function findNextScrap()
				for _, obj in ipairs(workspace:GetDescendants()) do
					if obj:IsA("Model") and obj.Name:lower() == "scrap" then
						local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
						local prompt = obj:FindFirstChildWhichIsA("ProximityPrompt", true)
							or obj:FindFirstChildWhichIsA("ClickDetector", true)
							or obj:FindFirstChild("TouchInterest", true)
						if part and prompt then
							return part, prompt
						end
					end
				end
				return nil
			end

			task.spawn(function()
				while isRunning do
					local char = lp.Character or lp.CharacterAdded:Wait()
					local hrp = char:WaitForChild("HumanoidRootPart")

					local part, prompt = findNextScrap()
					if not part then
						Rayfield:Notify({Title = name, Content = "No Scrap found", Duration = 2})
						break
					end

					hrp.CFrame = CFrame.new(part.Position + Vector3.new(0, 6.3, 0))

					local humanoid = char:FindFirstChildOfClass("Humanoid")
					if humanoid then
						humanoid.PlatformStand = false
						humanoid.Sit = false
					end

					pcall(function()
						if prompt:IsA("ProximityPrompt") then
							fireproximityprompt(prompt)
						elseif prompt:IsA("ClickDetector") then
							fireclickdetector(prompt)
						elseif prompt.Name == "TouchInterest" then
							firetouchinterest(hrp, part, 0)
							task.wait()
							firetouchinterest(hrp, part, 1)
						end
					end)

					task.wait(0.1) -- Ch·ªù r·∫•t ng·∫Øn ƒë·ªÉ tr√°nh l·ªói fire ch∆∞a k·ªãp ƒÉn
				end
			end)

			Rayfield:Notify({Title = name, Content = "Collecting started...", Duration = 2})
		end
	})
end

-- T·∫°o toggle duy nh·∫•t
createAutoScrapToggle(MTab, "Auto Scrap")

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local running = false
local heliList = {}
local originalCFrame = nil

local function isValidPrompt(obj)
	return obj and obj:IsDescendantOf(Workspace) and (
		obj:IsA("ProximityPrompt") or
		obj:IsA("ClickDetector") or
		obj.Name == "TouchInterest"
	)
end

local function activateNearbyPrompts()
	local char = LocalPlayer.Character
	if not char then return end

	local HRP = char:FindFirstChild("HumanoidRootPart")
	if not HRP then return end

	for _, obj in ipairs(Workspace:GetDescendants()) do
		if isValidPrompt(obj) then
			local part = obj:IsA("TouchTransmitter") and obj.Parent or obj.Parent
			if part and part:IsA("BasePart") then
				local dist = (part.Position - HRP.Position).Magnitude
				if dist <= 10 then
					pcall(function()
						if obj:IsA("ProximityPrompt") then
							fireproximityprompt(obj, math.huge)
						elseif obj:IsA("ClickDetector") then
							fireclickdetector(obj)
						elseif obj:IsA("TouchTransmitter") or obj.Name == "TouchInterest" then
							firetouchinterest(HRP, part, 0)
							task.wait()
							firetouchinterest(HRP, part, 1)
						end
					end)
				end
			end
		end
	end
end

local function getNearestHeli()
	local char = LocalPlayer.Character
	if not char then return end

	local HRP = char:FindFirstChild("HumanoidRootPart")
	if not HRP then return end

	local nearest, minDist = nil, math.huge
	for _, heli in ipairs(heliList) do
		if heli:IsDescendantOf(Workspace) then
			local dist = (heli:GetPivot().Position - HRP.Position).Magnitude
			if dist < minDist then
				minDist = dist
				nearest = heli
			end
		end
	end
	return nearest
end

local function refreshHelis()
	heliList = {}
	for _, v in ipairs(Workspace:GetDescendants()) do
		if v:IsA("Model") and v.Name == "heli_crash" then
			table.insert(heliList, v)
		end
	end
end

local function teleportSafe(cf)
	local char = LocalPlayer.Character
	if not char then return end

	local HRP = char:FindFirstChild("HumanoidRootPart")
	local Humanoid = char:FindFirstChildOfClass("Humanoid")

	if not HRP or not Humanoid then return end

	Humanoid.PlatformStand = true
	HRP.CFrame = cf
	task.wait(0.1)
	Humanoid.PlatformStand = false
end

local function autoCollect()
	while running do
		refreshHelis()

		local target = getNearestHeli()
		if not target then break end

		local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
		if not hrp then break end

		teleportSafe(target:GetPivot() + Vector3.new(0, 4, 0))

		local timeout = 2
		while timeout > 0 and running do
			activateNearbyPrompts()
			task.wait(0.5)
			timeout -= 0.5
		end

		table.remove(heliList, table.find(heliList, target))
	end

	if originalCFrame and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
		teleportSafe(originalCFrame)
	end
end

-- ‚úÖ G·∫Øn v√†o MTab
MTab:CreateToggle({
	Name = "Collect heli crash [Day >2]",
	CurrentValue = false,
	Flag = "CollectHeliCrash",
	Callback = function(state)
		running = state
		if state then
			local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
			if hrp then
				originalCFrame = hrp.CFrame
			end
			task.spawn(autoCollect)
		else
			heliList = {}
			originalCFrame = nil
		end
	end
})

local autoHeal = false

MTab:CreateToggle({
    Name = "Auto Heal Players",
    CurrentValue = false,
    Flag = "AutoHealPlayers",
    Callback = function(Value)
        autoHeal = Value
        if autoHeal then
            task.spawn(function()
                while autoHeal do
                    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                        local char = player.Character
                        if char and char:FindFirstChild("Humanoid") and char:FindFirstChild("HumanoidRootPart") then
                            local hp = char.Humanoid.Health
                            local maxHp = char.Humanoid.MaxHealth
                            if hp < maxHp then
                                local args = { char }
                                game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("heal"):FireServer(unpack(args))
                            end
                        end
                    end
                    task.wait(0.5)
                end
            end)
        end
    end,
})    

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local AutoKeyRunning = false
local KeyConnection
local KeyList = {}

MTab:CreateToggle({
	Name = "Auto Interact", -- üîÑ ƒê·ªïi t√™n t·∫°i ƒë√¢y
	CurrentValue = false,
	Callback = function(state)
		AutoKeyRunning = state
		if state then
			local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
			local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
			local lastTriggerTime = {}

			local function scanInteractables()
				KeyList = {}
				for _, obj in ipairs(workspace:GetDescendants()) do
					if (obj:IsA("ProximityPrompt") or obj:IsA("ClickDetector") or obj.Name == "TouchInterest") and not obj:IsDescendantOf(LocalPlayer.Character) then
						local model = obj:FindFirstAncestorWhichIsA("Model")
						table.insert(KeyList, {model = model, obj = obj})
					end
				end
			end

			scanInteractables()

			workspace.DescendantAdded:Connect(function(desc)
				if AutoKeyRunning and (desc:IsA("ProximityPrompt") or desc:IsA("ClickDetector") or desc.Name == "TouchInterest") and not desc:IsDescendantOf(LocalPlayer.Character) then
					local model = desc:FindFirstAncestorWhichIsA("Model")
					table.insert(KeyList, {model = model, obj = desc})
				end
			end)

			local function triggerPrompt(obj)
				if not obj or not obj:IsDescendantOf(workspace) then return false end
				local success = false
				pcall(function()
					if obj:IsA("ProximityPrompt") then
						fireproximityprompt(obj, math.huge)
						success = true
					elseif obj:IsA("ClickDetector") then
						fireclickdetector(obj)
						success = true
					elseif obj:IsA("TouchTransmitter") or obj.Name == "TouchInterest" then
						local part = obj.Parent
						if part and part:IsA("BasePart") then
							firetouchinterest(HumanoidRootPart, part, 0)
							task.wait()
							firetouchinterest(HumanoidRootPart, part, 1)
							success = true
						end
					end
				end)
				return success
			end

			local function getClosestPart(model, refPos)
				local closest, minDist = nil, math.huge
				for _, part in ipairs(model:GetChildren()) do
					if part:IsA("BasePart") then
						local dist = (part.Position - refPos).Magnitude
						if dist < minDist then
							minDist = dist
							closest = part
						end
					end
				end
				return closest, minDist
			end

			KeyConnection = RunService.Heartbeat:Connect(function()
				if not AutoKeyRunning or not LocalPlayer.Character then return end
				local HRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
				if not HRP then return end

				local now = tick()
				for i = #KeyList, 1, -1 do
					local data = KeyList[i]
					local model = data.model
					local obj = data.obj

					if not model or not model:IsDescendantOf(workspace) or not obj or not obj:IsDescendantOf(model) then
						table.remove(KeyList, i)
						continue
					end

					if lastTriggerTime[model] and now - lastTriggerTime[model] < 2 then
						continue
					end

					local _, dist = getClosestPart(model, HRP.Position)
					if dist and dist <= 10 then
						local success = triggerPrompt(obj)
						if success then
							lastTriggerTime[model] = now
						else
							table.remove(KeyList, i)
						end
					end
				end
			end)
		else
			if KeyConnection then
				KeyConnection:Disconnect()
				KeyConnection = nil
			end
			KeyList = {}
		end
	end
})
  

MTab:CreateSection("Get Berry")

local toggleRunning = false
local connection

MTab:CreateToggle({
	Name = "GetBerry [INF]",
	CurrentValue = false,
	Flag = "GetBerryINF",
	Callback = function(state)
		toggleRunning = state

		local lp = game:GetService("Players").LocalPlayer
		local RunService = game:GetService("RunService")

		if connection then
			connection:Disconnect()
			connection = nil
		end

		local char = lp.Character or lp.CharacterAdded:Wait()
		local hrp = char:WaitForChild("HumanoidRootPart")
		local hum = char:FindFirstChildOfClass("Humanoid")
		if not (hrp and hum) then return end

		local originalCFrame = hrp.CFrame

		if not state then
			char:PivotTo(originalCFrame)
			return
		end

		connection = RunService.Heartbeat:Connect(function()
			if not toggleRunning then return end

			char = lp.Character or lp.CharacterAdded:Wait()
			hrp = char:FindFirstChild("HumanoidRootPart")
			hum = char:FindFirstChildOfClass("Humanoid")
			if not (hrp and hum) then return end

			local nearestBerry, shortestDist = nil, math.huge
			for _, obj in ipairs(workspace:GetDescendants()) do
				if obj:IsA("Model") and obj.Name:lower() == "berry" then
					local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
					if part then
						local dist = (hrp.Position - part.Position).Magnitude
						if dist < shortestDist then
							nearestBerry = obj
							shortestDist = dist
						end
					end
				end
			end

			if nearestBerry then
				local part = nearestBerry.PrimaryPart or nearestBerry:FindFirstChildWhichIsA("BasePart")
				if not nearestBerry.PrimaryPart and part then
					pcall(function()
						nearestBerry.PrimaryPart = part
					end)
				end

				local prompt = nearestBerry:FindFirstChildWhichIsA("ProximityPrompt", true)
					or nearestBerry:FindFirstChildWhichIsA("ClickDetector", true)
					or nearestBerry:FindFirstChild("TouchInterest", true)

				if prompt and part then
					char:PivotTo(part.CFrame + Vector3.new(0, 7, 0))
					task.wait(0.25)

					for i = 1, 50 do
						pcall(function()
							if prompt:IsA("ProximityPrompt") then
								fireproximityprompt(prompt)
							elseif prompt:IsA("ClickDetector") then
								fireclickdetector(prompt)
							elseif prompt.Name == "TouchInterest" then
								firetouchinterest(hrp, part, 0)
								task.wait()
								firetouchinterest(hrp, part, 1)
							end
						end)
						task.wait(0.05)
					end

					task.wait(0.2)
					char:PivotTo(originalCFrame)
					task.wait(1) -- Ch·ªù 1 gi√¢y tr∆∞·ªõc l·∫ßn l·∫∑p k·∫ø ti·∫øp
				end
			else
				task.wait(1)
			end
		end)
	end
})

MTab:CreateButton({
	Name = "GetBerry [30/04/1975]",
	Callback = function()
		local lp = game:GetService("Players").LocalPlayer
		local char = lp.Character or lp.CharacterAdded:Wait()
		local hrp = char:WaitForChild("HumanoidRootPart")
		local hum = char:FindFirstChildOfClass("Humanoid")
		if not (hrp and hum) then return end

		local originalCFrame = hrp.CFrame

		local nearestBerry, shortestDist = nil, math.huge
		for _, obj in ipairs(workspace:GetDescendants()) do
			if obj:IsA("Model") and obj.Name:lower() == "berry" then
				local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
				if part then
					local dist = (hrp.Position - part.Position).Magnitude
					if dist < shortestDist then
						nearestBerry = obj
						shortestDist = dist
					end
				end
			end
		end

		if nearestBerry then
			local part = nearestBerry.PrimaryPart or nearestBerry:FindFirstChildWhichIsA("BasePart")
			if not nearestBerry.PrimaryPart and part then
				pcall(function()
					nearestBerry.PrimaryPart = part
				end)
			end

			local prompt = nearestBerry:FindFirstChildWhichIsA("ProximityPrompt", true)
				or nearestBerry:FindFirstChildWhichIsA("ClickDetector", true)
				or nearestBerry:FindFirstChild("TouchInterest", true)

			if prompt and part then
				-- TP 1 l·∫ßn
				char:PivotTo(part.CFrame + Vector3.new(0, 7, 0))
				task.wait(0.25)

				-- Nh·∫∑t ƒë·ªß s·ªë l·∫ßn t·∫°i ch·ªó
				for i = 1, 6095 do
					pcall(function()
						if prompt:IsA("ProximityPrompt") then
							fireproximityprompt(prompt)
						elseif prompt:IsA("ClickDetector") then
							fireclickdetector(prompt)
						elseif prompt.Name == "TouchInterest" then
							firetouchinterest(hrp, part, 0)
							task.wait()
							firetouchinterest(hrp, part, 1)
						end
					end)
				end

				-- TP v·ªÅ ch·ªó c≈©
				task.wait(0.2)
				char:PivotTo(originalCFrame)
			end
		end
	end
})

MTab:CreateInput({
	Name = "Collect Berry (Input berry number)",
	PlaceholderText = "Enter quantity (100000 MAX)",
	RemoveTextAfterFocusLost = false,
	Callback = function(text)
		local amount = tonumber(text)
		if not amount or amount <= 0 then
			warn("S·ªë kh√¥ng h·ª£p l·ªá")
			return
		end

		-- Gi·ªõi h·∫°n t·ªëi ƒëa 100000 berry
		if amount > 100000 then
			amount = 100000
		end

		-- L√†m tr√≤n l√™n b·ªôi s·ªë c·ªßa 5
		local rounded = math.ceil(amount / 5) * 5
		local repeatCount = rounded / 5

		local lp = game:GetService("Players").LocalPlayer
		local char = lp.Character or lp.CharacterAdded:Wait()
		local hrp = char:WaitForChild("HumanoidRootPart")
		local hum = char:FindFirstChildOfClass("Humanoid")
		if not (hrp and hum) then return end

		local originalCFrame = hrp.CFrame

		local nearestBerry, shortestDist = nil, math.huge
		for _, obj in ipairs(workspace:GetDescendants()) do
			if obj:IsA("Model") and obj.Name:lower() == "berry" then
				local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
				if part then
					local dist = (hrp.Position - part.Position).Magnitude
					if dist < shortestDist then
						nearestBerry = obj
						shortestDist = dist
					end
				end
			end
		end

		if nearestBerry then
			local part = nearestBerry.PrimaryPart or nearestBerry:FindFirstChildWhichIsA("BasePart")
			if not nearestBerry.PrimaryPart and part then
				pcall(function()
					nearestBerry.PrimaryPart = part
				end)
			end

			local prompt = nearestBerry:FindFirstChildWhichIsA("ProximityPrompt", true)
				or nearestBerry:FindFirstChildWhichIsA("ClickDetector", true)
				or nearestBerry:FindFirstChild("TouchInterest", true)

			if prompt and part then
				char:PivotTo(part.CFrame + Vector3.new(0, 7, 0))
				task.wait(0.25)

				for i = 1, repeatCount do
					pcall(function()
						if prompt:IsA("ProximityPrompt") then
							fireproximityprompt(prompt)
						elseif prompt:IsA("ClickDetector") then
							fireclickdetector(prompt)
						elseif prompt.Name == "TouchInterest" then
							firetouchinterest(hrp, part, 0)
							task.wait()
							firetouchinterest(hrp, part, 1)
						end
					end)
				end

				task.wait(0.2)
				char:PivotTo(originalCFrame)
			end
		end
	end
})



MTab:CreateSection("Blood moon")


local toggleRunning = false
local connection

MTab:CreateToggle({
	Name = "Get Blood Bark [INF]",
	CurrentValue = false,
	Flag = "GetBerryINF",
	Callback = function(state)
		toggleRunning = state

		local lp = game:GetService("Players").LocalPlayer
		local RunService = game:GetService("RunService")

		if connection then
			connection:Disconnect()
			connection = nil
		end

		local char = lp.Character or lp.CharacterAdded:Wait()
		local hrp = char:WaitForChild("HumanoidRootPart")
		local hum = char:FindFirstChildOfClass("Humanoid")
		if not (hrp and hum) then return end

		local originalCFrame = hrp.CFrame

		if not state then
			char:PivotTo(originalCFrame)
			return
		end

		connection = RunService.Heartbeat:Connect(function()
			if not toggleRunning then return end

			char = lp.Character or lp.CharacterAdded:Wait()
			hrp = char:FindFirstChild("HumanoidRootPart")
			hum = char:FindFirstChildOfClass("Humanoid")
			if not (hrp and hum) then return end

			local nearestBerry, shortestDist = nil, math.huge
			for _, obj in ipairs(workspace:GetDescendants()) do
				if obj:IsA("Model") and obj.Name:lower() == "blood_bark" then
					local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
					if part then
						local dist = (hrp.Position - part.Position).Magnitude
						if dist < shortestDist then
							nearestBerry = obj
							shortestDist = dist
						end
					end
				end
			end

			if nearestBerry then
				local part = nearestBerry.PrimaryPart or nearestBerry:FindFirstChildWhichIsA("BasePart")
				if not nearestBerry.PrimaryPart and part then
					pcall(function()
						nearestBerry.PrimaryPart = part
					end)
				end

				local prompt = nearestBerry:FindFirstChildWhichIsA("ProximityPrompt", true)
					or nearestBerry:FindFirstChildWhichIsA("ClickDetector", true)
					or nearestBerry:FindFirstChild("TouchInterest", true)

				if prompt and part then
					char:PivotTo(part.CFrame + Vector3.new(0, 7, 0))
					task.wait(0.25)

					for i = 1, 50 do
						pcall(function()
							if prompt:IsA("ProximityPrompt") then
								fireproximityprompt(prompt)
							elseif prompt:IsA("ClickDetector") then
								fireclickdetector(prompt)
							elseif prompt.Name == "TouchInterest" then
								firetouchinterest(hrp, part, 0)
								task.wait()
								firetouchinterest(hrp, part, 1)
							end
						end)
						task.wait(0.05)
					end

					task.wait(0.2)
					char:PivotTo(originalCFrame)
					task.wait(1) -- Ch·ªù 1 gi√¢y tr∆∞·ªõc l·∫ßn l·∫∑p k·∫ø ti·∫øp
				end
			else
				task.wait(1)
			end
		end)
	end
})

MTab:CreateButton({
	Name = "Get Blood Bark [30/04/1975]",
	Callback = function()
		local lp = game:GetService("Players").LocalPlayer
		local char = lp.Character or lp.CharacterAdded:Wait()
		local hrp = char:WaitForChild("HumanoidRootPart")
		local hum = char:FindFirstChildOfClass("Humanoid")
		if not (hrp and hum) then return end

		local originalCFrame = hrp.CFrame

		local nearestBerry, shortestDist = nil, math.huge
		for _, obj in ipairs(workspace:GetDescendants()) do
			if obj:IsA("Model") and obj.Name:lower() == "blood_bark" then
				local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
				if part then
					local dist = (hrp.Position - part.Position).Magnitude
					if dist < shortestDist then
						nearestBerry = obj
						shortestDist = dist
					end
				end
			end
		end

		if nearestBerry then
			local part = nearestBerry.PrimaryPart or nearestBerry:FindFirstChildWhichIsA("BasePart")
			if not nearestBerry.PrimaryPart and part then
				pcall(function()
					nearestBerry.PrimaryPart = part
				end)
			end

			local prompt = nearestBerry:FindFirstChildWhichIsA("ProximityPrompt", true)
				or nearestBerry:FindFirstChildWhichIsA("ClickDetector", true)
				or nearestBerry:FindFirstChild("TouchInterest", true)

			if prompt and part then
				-- TP 1 l·∫ßn
				char:PivotTo(part.CFrame + Vector3.new(0, 7, 0))
				task.wait(0.25)

				-- Nh·∫∑t ƒë·ªß s·ªë l·∫ßn t·∫°i ch·ªó
				for i = 1, 6095 do
					pcall(function()
						if prompt:IsA("ProximityPrompt") then
							fireproximityprompt(prompt)
						elseif prompt:IsA("ClickDetector") then
							fireclickdetector(prompt)
						elseif prompt.Name == "TouchInterest" then
							firetouchinterest(hrp, part, 0)
							task.wait()
							firetouchinterest(hrp, part, 1)
						end
					end)
				end

				-- TP v·ªÅ ch·ªó c≈©
				task.wait(0.2)
				char:PivotTo(originalCFrame)
			end
		end
	end
})

MTab:CreateInput({
	Name = "Collect Blood Bark (Input berry number)",
	PlaceholderText = "Enter quantity (100000 MAX)",
	RemoveTextAfterFocusLost = false,
	Callback = function(text)
		local amount = tonumber(text)
		if not amount or amount <= 0 then
			warn("S·ªë kh√¥ng h·ª£p l·ªá")
			return
		end

		-- Gi·ªõi h·∫°n t·ªëi ƒëa 100000 berry
		if amount > 100000 then
			amount = 100000
		end

		-- L√†m tr√≤n l√™n b·ªôi s·ªë c·ªßa 5
		local rounded = math.ceil(amount / 5) * 5
		local repeatCount = rounded / 5

		local lp = game:GetService("Players").LocalPlayer
		local char = lp.Character or lp.CharacterAdded:Wait()
		local hrp = char:WaitForChild("HumanoidRootPart")
		local hum = char:FindFirstChildOfClass("Humanoid")
		if not (hrp and hum) then return end

		local originalCFrame = hrp.CFrame

		local nearestBerry, shortestDist = nil, math.huge
		for _, obj in ipairs(workspace:GetDescendants()) do
			if obj:IsA("Model") and obj.Name:lower() == "blood_bark" then
				local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
				if part then
					local dist = (hrp.Position - part.Position).Magnitude
					if dist < shortestDist then
						nearestBerry = obj
						shortestDist = dist
					end
				end
			end
		end

		if nearestBerry then
			local part = nearestBerry.PrimaryPart or nearestBerry:FindFirstChildWhichIsA("BasePart")
			if not nearestBerry.PrimaryPart and part then
				pcall(function()
					nearestBerry.PrimaryPart = part
				end)
			end

			local prompt = nearestBerry:FindFirstChildWhichIsA("ProximityPrompt", true)
				or nearestBerry:FindFirstChildWhichIsA("ClickDetector", true)
				or nearestBerry:FindFirstChild("TouchInterest", true)

			if prompt and part then
				char:PivotTo(part.CFrame + Vector3.new(0, 7, 0))
				task.wait(0.25)

				for i = 1, repeatCount do
					pcall(function()
						if prompt:IsA("ProximityPrompt") then
							fireproximityprompt(prompt)
						elseif prompt:IsA("ClickDetector") then
							fireclickdetector(prompt)
						elseif prompt.Name == "TouchInterest" then
							firetouchinterest(hrp, part, 0)
							task.wait()
							firetouchinterest(hrp, part, 1)
						end
					end)
				end

				task.wait(0.2)
				char:PivotTo(originalCFrame)
			end
		end
	end
})



















-- T·∫°o Tab Visual
local VTab = Window:CreateTab("Visual", "eye")
VTab:CreateSection("Main Visual")

VTab:CreateButton({
    Name = "Players üë•",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/7DayToLive/refs/heads/main/Playeresp"))()
    end,
})

-- Esp house button (Rayfield GUI - VTab)
VTab:CreateButton({
    Name = "House üè†",
    Callback = function()
       loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/7DayToLive/refs/heads/main/Home"))()
    end
})

VTab:CreateButton({
    Name = "Easter egg ü•ö (Fishing)",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/7DayToLive/refs/heads/main/Eastereggesp"))()
    end,
})

VTab:CreateButton({
Name = "Glass",
Callback = function()
task.spawn(function()
	local espName = "ItemESP" -- T√™n node ESP trong BillboardGui
	local highlightName = "ItemHighlight" -- T√™n node highlight
	local itemName = "glass" -- üîÅ ‚Üê T√™n object c·∫ßn ESP (VD: "Tble", "Flower", "scrap")

	local labelText = "glass" -- üîÅ ‚Üê VƒÉn b·∫£n hi·ªán tr√™n ESP
	local espColor = Color3.fromRGB(255, 255, 255)
	local outlineColor = Color3.fromRGB(0, 0, 0)
	local highlightColor = Color3.fromRGB(255, 255, 255)

	-- T·∫°o ESP
	local function createESP(item)
		if item:FindFirstChild(espName) then return end

		local billboard = Instance.new("BillboardGui")
		billboard.Name = espName
		billboard.AlwaysOnTop = true
		billboard.Size = UDim2.new(0, 200, 0, 50)
		billboard.StudsOffset = Vector3.new(0, 3, 0)
		billboard.MaxDistance = math.huge
		billboard.Parent = item

		local textLabel = Instance.new("TextLabel", billboard)
		textLabel.Text = labelText
		textLabel.TextColor3 = espColor
		textLabel.TextStrokeColor3 = outlineColor
		textLabel.TextStrokeTransparency = 0
		textLabel.BackgroundTransparency = 1
		textLabel.Size = UDim2.new(1, 0, 1, 0)
		textLabel.TextSize = 12
		textLabel.Font = Enum.Font.SourceSansBold

		local highlight = Instance.new("Highlight")
		highlight.Name = highlightName
		highlight.FillColor = highlightColor
		highlight.FillTransparency = 0.5
		highlight.OutlineColor = highlightColor
		highlight.OutlineTransparency = 0
		highlight.Parent = item
	end

	-- Qu√©t ban ƒë·∫ßu
	for _, item in ipairs(workspace:GetDescendants()) do
		if item.Name == itemName and not item:FindFirstChild(espName) then
			createESP(item)
		end
	end

	-- L·∫Øng nghe khi object m·ªõi xu·∫•t hi·ªán
	workspace.DescendantAdded:Connect(function(descendant)
		if descendant.Name == itemName and not descendant:FindFirstChild(espName) then
			task.wait(0.1)
			createESP(descendant)
		end
	end)
end)
end,
})

VTab:CreateSection("ESP Toggles")

local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local activeESPList = {}
local espObjects = {}

-- C·∫•u h√¨nh
local itemSettings = {
	flax = {label = "Cordage", color = Color3.fromRGB(18, 111, 0)},
	carrot = {label = "Carrot", color = Color3.fromRGB(255, 137, 64)},
	flower = {label = "Flower", color = Color3.fromRGB(255, 185, 215)},
	pebbles = {label = "Pebble", color = Color3.fromRGB(200, 200, 200)},
	cabin = {label = "Cabin", color = Color3.fromRGB(137, 80, 0)},
	scrap = {label = "Scrap", color = Color3.fromRGB(136, 69, 53)},
	stone = {label = "Stone", color = Color3.fromRGB(200, 200, 200)},
 Turret = {label = "Turret", color = Color3.fromRGB(0, 0, 0)},
	abandoned_shack = {label = "Materials", color = Color3.fromRGB(137, 80, 0)},
	heli_crash = {label = "Heli Crash", color = Color3.fromRGB(255, 212, 143)},
	well = {label = "Well", color = Color3.fromRGB(150, 150, 150)},
	cross = {label = "Cross", color = Color3.fromRGB(150, 75, 0)},
	dead_house = {label = "House", color = Color3.fromRGB(150, 75, 0)},
	stair = {label = "Stair", color = Color3.fromRGB(99, 95, 98)},
	campsite1 = {label = "Campsite", color = Color3.fromRGB(255, 50, 0)},
}

--[[
 Object = {label = "Name", color = Color3.fromRGB(255,255,255)
-- n·∫øu object c√≥ kho·∫£ng tr·∫Øng:  Enemy Model
 ["Enemy Model"] = {label = "Enemy Model", color = Color3.fromRGB(255,255,255)

-- -- sao ch√©p nhanh

  = {label = "", color = Color3.fromRGB()

-- n·∫øu object c√≥ kho·∫£ng tr·∫Øng

 [""] = {label = "", color = Color3.fromRGB()

]]

-- T·∫°o ESP Billboard
local function createESP(item, text, color)
	if espObjects[item] then return end
	local part = item:FindFirstChildWhichIsA("BasePart") or item.PrimaryPart
	if not part then return end

	local gui = Instance.new("BillboardGui")
	gui.Name = "ItemESP"
	gui.AlwaysOnTop = true
	gui.Size = UDim2.new(0, 100, 0, 40)
	gui.StudsOffset = Vector3.new(0, 2, 0)
	gui.MaxDistance = 500 -- Gi·ªõi h·∫°n hi·ªÉn th·ªã xa
	gui.Adornee = part
	gui.Parent = item

	local label = Instance.new("TextLabel", gui)
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(1, 0, 1, 0)
	label.Text = text
	label.TextColor3 = color
	label.Font = Enum.Font.Bodoni
	label.TextStrokeColor3 = Color3.new(0, 0, 0)
	label.TextStrokeTransparency = 0
	label.TextSize = 20

	espObjects[item] = {gui = gui, label = label}
end

-- Xo√° ESP
local function removeESP(item)
	local data = espObjects[item]
	if data then
		if data.gui then data.gui:Destroy() end
		espObjects[item] = nil
	end
end

-- Update TextSize theo kho·∫£ng c√°ch
RunService.RenderStepped:Connect(function()
	for item, data in pairs(espObjects) do
		if not item:IsDescendantOf(Workspace) or not activeESPList[item.Name] then
			removeESP(item)
		else
			local pos = item:GetPivot().Position
			local dist = (Camera.CFrame.Position - pos).Magnitude
			data.label.TextSize = math.clamp(25 * (1 - dist / 200), 10, 25)
		end
	end
end)

-- Theo d√µi spawn m·ªõi
Workspace.DescendantAdded:Connect(function(obj)
	if obj:IsA("Model") and itemSettings[obj.Name] and activeESPList[obj.Name] then
		task.wait(0.05)
		local setting = itemSettings[obj.Name]
		createESP(obj, setting.label, setting.color)
	end
end)

-- T·∫°o toggle t·ª´ng lo·∫°i
for objName, setting in pairs(itemSettings) do
	VTab:CreateToggle({
		Name = "ESP: " .. setting.label,
		CurrentValue = false,
		Callback = function(state)
			activeESPList[objName] = state

			if not state then
				for obj in pairs(espObjects) do
					if obj.Name == objName then
						removeESP(obj)
					end
				end
			else
				-- Qu√©t to√†n b·ªô Descendants thay v√¨ ch·ªâ GetChildren
				for _, obj in ipairs(Workspace:GetDescendants()) do
					if obj:IsA("Model") and obj.Name == objName and not espObjects[obj] then
						createESP(obj, setting.label, setting.color)
					end
				end
			end
		end
	})
end

local bloodRunning = false
local bloodConnection

VTab:CreateToggle({
	Name = "Blood bark [Bloodmoon]",
	CurrentValue = false,
	Flag = "BloodESP",
	Callback = function(state)
		bloodRunning = state

		if bloodConnection then
			bloodConnection:Disconnect()
			bloodConnection = nil
		end

		local player = game:GetService("Players").LocalPlayer
		local camera = workspace.CurrentCamera

		-- Xo√° ESP c≈© n·∫øu c√≥
		for _, v in ipairs(workspace:GetDescendants()) do
			if v:FindFirstChild("BloodESP") then
				v.BloodESP:Destroy()
			end
			if v:FindFirstChild("BloodHighlight") then
				v.BloodHighlight:Destroy()
			end
		end

		if not state then return end

		local function createESP(item)
			if item:FindFirstChild("BloodESP") then return end

			local billboard = Instance.new("BillboardGui")
			billboard.Name = "BloodESP"
			billboard.AlwaysOnTop = true
			billboard.Size = UDim2.new(0, 200, 0, 50)
			billboard.StudsOffset = Vector3.new(0, 3, 0)
			billboard.MaxDistance = math.huge
			billboard.Parent = item

			local textLabel = Instance.new("TextLabel")
			textLabel.Parent = billboard
			textLabel.Text = "Blood bark"
			textLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
			textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
			textLabel.TextStrokeTransparency = 0
			textLabel.BackgroundTransparency = 1
			textLabel.Size = UDim2.new(1, 0, 1, 0)
			textLabel.TextScaled = false
			textLabel.Font = Enum.Font.Bodoni
			textLabel.TextSize = 25

			local highlight = Instance.new("Highlight")
			highlight.Name = "BloodHighlight"
			highlight.FillColor = Color3.fromRGB(180, 0, 0)
			highlight.FillTransparency = 0.9
			highlight.OutlineColor = Color3.fromRGB(100, 0, 0)
			highlight.OutlineTransparency = 0
			highlight.Parent = item

			task.spawn(function()
				while bloodRunning and billboard and billboard.Parent do
					local distance = (camera.CFrame.Position - item:GetPivot().Position).Magnitude
					local size = math.clamp(25 * (1 - distance / 200), 10, 25)
					textLabel.TextSize = size
					task.wait(0.2)
				end
			end)
		end

		local function checkForBloodBark()
			for _, item in ipairs(workspace:GetDescendants()) do
				if item:IsA("Model") and item.Name == "blood_bark" then
					createESP(item)
				end
			end
		end

		bloodConnection = workspace.DescendantAdded:Connect(function(descendant)
			if descendant:IsA("Model") and descendant.Name == "blood_bark" then
				task.wait(0.1)
				createESP(descendant)
			end
		end)

		checkForBloodBark()
	end
})

VTab:CreateSection("Animal, SCPs")

local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local activeESPList = {}
local espObjects = {} -- Key: DebugId -> Value: gui info

-- Danh s√°ch lo·∫°i tr·ª´ SCP
local excludedNPCs = {
	bear = true,
	deer = true,
	mammoth = true
}

-- C·∫•u h√¨nh t·ª´ng lo·∫°i
local itemSettings = {
	deer = {label = "Deer", color = Color3.fromRGB(0, 255, 0)},
	bear = {label = "Bear", color = Color3.fromRGB(255, 255, 0)},
	mammoth = {label = "Mammoth", color = Color3.fromRGB(155, 0, 0)},
}

-- Xo√° ESP
local function removeESP(item)
	local id = item:GetDebugId()
	local data = espObjects[id]
	if data and data.gui then
		data.gui:Destroy()
	end
	espObjects[id] = nil
end

-- T·∫°o ESP Billboard
local function createESP(item, baseText, color)
	local id = item:GetDebugId()
	if espObjects[id] then return end
	local humanoid = item:FindFirstChildOfClass("Humanoid")
	if not humanoid or humanoid.Health <= 0 then return end

	local part = item.PrimaryPart or item:FindFirstChild("Head") or item:FindFirstChildWhichIsA("BasePart")
	if not part then return end

	local gui = Instance.new("BillboardGui")
	gui.Name = "ItemESP"
	gui.AlwaysOnTop = true
	gui.Size = UDim2.new(0, 100, 0, 40)
	gui.StudsOffset = Vector3.new(0, 2, 0)
	gui.MaxDistance = 1000
	gui.Adornee = part
	gui.Parent = item

	local label = Instance.new("TextLabel", gui)
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(1, 0, 1, 0)
	label.Text = baseText
	label.TextColor3 = color
	label.Font = Enum.Font.Bodoni
	label.TextStrokeColor3 = Color3.new(0, 0, 0)
	label.TextStrokeTransparency = 0
	label.TextSize = 20

	espObjects[id] = {gui = gui, label = label, humanoid = humanoid, baseText = baseText, model = item}

	task.spawn(function()
		humanoid.Died:Connect(function()
			removeESP(item)
		end)
		item.AncestryChanged:Connect(function(_, parent)
			if not parent then
				removeESP(item)
			end
		end)
	end)
end

-- C·∫≠p nh·∫≠t textsize + m√°u mammoth
RunService.RenderStepped:Connect(function()
	for id, data in pairs(espObjects) do
		local item = data.model
		if not item or not item:IsDescendantOf(Workspace) then
			removeESP(item)
		else
			local pos = item:GetPivot().Position
			local dist = (Camera.CFrame.Position - pos).Magnitude
			data.label.TextSize = math.clamp(25 * (1 - dist / 500), 10, 25)

			if item.Name:lower() == "mammoth" then
				local hp = math.floor(data.humanoid.Health)
				local max = math.floor(data.humanoid.MaxHealth)
				data.label.Text = data.baseText .. " | " .. hp .. "/" .. max
			end
		end
	end
end)

-- Theo d√µi NPC m·ªõi spawn
Workspace.DescendantAdded:Connect(function(obj)
	local model = obj:FindFirstAncestorOfClass("Model")
	if model and model:FindFirstChildOfClass("Humanoid") and not Players:GetPlayerFromCharacter(model) then
		task.wait(0.05)
		local name = model.Name:lower()

		if activeESPList["scps"] and not excludedNPCs[name] then
			createESP(model, model.Name, Color3.fromRGB(255, 255, 255))
		elseif itemSettings[name] and activeESPList[name] then
			local setting = itemSettings[name]
			createESP(model, setting.label, setting.color)
		end
	end
end)

-- Toggle SCPs
VTab:CreateToggle({
	Name = "ESP: SCPs",
	CurrentValue = false,
	Callback = function(state)
		activeESPList["scps"] = state

		for _, model in ipairs(Workspace:GetDescendants()) do
			if model:IsA("Model") and model:FindFirstChildOfClass("Humanoid") and not Players:GetPlayerFromCharacter(model) then
				local name = model.Name:lower()
				local isExcluded = excludedNPCs[name]
				local isSpecific = itemSettings[name]

				if state and not isExcluded then
					createESP(model, model.Name, Color3.fromRGB(255, 255, 255))
				elseif not state and not isSpecific and not isExcluded then
					removeESP(model)
				end
			end
		end
	end
})

-- Toggle ri√™ng t·ª´ng lo·∫°i
for objName, setting in pairs(itemSettings) do
	VTab:CreateToggle({
		Name = "ESP: " .. setting.label,
		CurrentValue = false,
		Callback = function(state)
			activeESPList[objName] = state

			for _, model in ipairs(Workspace:GetDescendants()) do
				if model:IsA("Model") and model.Name:lower() == objName and model:FindFirstChildOfClass("Humanoid") then
					if state then
						createESP(model, setting.label, setting.color)
					else
						removeESP(model)
					end
				end
			end
		end
	})
end































local TeleportTab = Window:CreateTab("Teleport", "map")
TeleportTab:CreateSection("Main Location")
TeleportTab:CreateParagraph({
	Title = "Note",
	Content = " Teleportation may not be correct because 7DTL currently uses Random map",
})
-- V·ªã tr√≠ ch√≠nh
local locations = {
    {Name = "House", Position = Vector3.new(1328.45, 29.15, 1320.02)}, 
    {Name = "House balcony üè†", Position = Vector3.new(1305.69, 42.51, 1319.58)},
    {Name = "House roof üè†", Position = Vector3.new(1328.53, 56.30, 1319.72)},
    {Name = "House balcony üè†[Map2]", Position = Vector3.new(1307.94, 69.88, 1321.95)},
    {Name = "House roof üè†[Map2]", Position = Vector3.new(1326.80, 84.83, 1322.15)},
    {Name = "House[Map3]", Position = Vector3.new(1326.74, 42.57, 1322.02)},
    {Name = "House balcony [Map3]", Position = Vector3.new(1305.78, 53.57, 1321.77)}, 
    {Name = "House roof [Map3]", Position = Vector3.new(1326.80, 66.57, 1322.15)}, 
}

for _, loc in ipairs(locations) do
    TeleportTab:CreateButton({
        Name = "Go to " .. loc.Name,
        Callback = function()
            local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.CFrame = CFrame.new(loc.Position)
            end
        end
    })
end

TeleportTab:CreateSection("Misc")

TeleportTab:CreateButton({
        Name = "Go to Void",
        Callback = function()
            local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.CFrame = CFrame.new(1374.68, 2.50, 1415.18)
            end
        end
    })

local usedTargets = {}
local pendingTargets = {} -- T·ª± ƒë·ªông c·∫≠p nh·∫≠t n·∫øu c√≥ object m·ªõi
local allowedNames = {
	["abandoned_shack"] = true,
	["cabin"] = true
}

TeleportTab:CreateButton({
	Name = "Go to Materials [Limited][Day >2]",
	Callback = function()
		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer
		local Workspace = game:GetService("Workspace")

		local function getHRP()
			local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
			return char:WaitForChild("HumanoidRootPart", 5)
		end

		local function getUnvisitedTarget()
			local nearest, minDist = nil, math.huge
			local hrp = getHRP()
			if not hrp then return end

			for _, obj in ipairs(workspace:GetDescendants()) do
				if obj:IsA("Model") and allowedNames[obj.Name] and not usedTargets[obj] then
					local part = obj:FindFirstChildWhichIsA("BasePart")
					if part then
						local dist = (hrp.Position - part.Position).Magnitude
						if dist < minDist then
							minDist = dist
							nearest = obj
						end
					end
				end
			end
			return nearest, minDist
		end

		local function safeTeleport(cf)
			local hrp = getHRP()
			if not hrp then return end

			for _, v in pairs(LocalPlayer.Character:GetDescendants()) do
				if v:IsA("BasePart") then
					v.CanCollide = false
					v.Velocity = Vector3.zero
					v.RotVelocity = Vector3.zero
				end
			end

			task.wait()
			hrp.Anchored = true
			hrp.CFrame = cf * CFrame.new(0, 3, 0)
			task.wait(0.15)
			hrp.Anchored = false
		end

		local target, dist = getUnvisitedTarget()
		if target then
			local mainPart = target:FindFirstChildWhichIsA("BasePart")
			if mainPart then
				safeTeleport(mainPart.CFrame)
				print("ƒê√£ d·ªãch chuy·ªÉn ƒë·∫øn:", target.Name, "| Dist:", math.floor(dist))
				usedTargets[target] = true
			end
		else
			warn("Kh√¥ng c√≤n target ƒë·ªÉ d·ªãch chuy·ªÉn.")
			error("Limit reached.") -- G·ªçi l·ªói ƒë·ªÉ v√¥ hi·ªáu ho√° n√∫t
		end
	end
})

-- Theo d√µi object m·ªõi
workspace.DescendantAdded:Connect(function(obj)
	if obj:IsA("Model") and allowedNames[obj.Name] then
		if not usedTargets[obj] then
			pendingTargets[obj] = true -- n·∫øu sau n√†y c·∫ßn d√πng
		end
	end
end)
















local CTab = Window:CreateTab("Craft", "wrench")

-- Section: Builds
CTab:CreateSection("Builds Wood")
local builds = {
	{Name = "Planter", Requires = "15 Wood"},
	{Name = "Campfire", Requires = "4 Wood, 9 Stone"},
	{Name = "Chair", Requires = "2 Wood"},
	{Name = "Ladder", Requires = "5 Wood"},
	{Name = "Table", Requires = "4 Wood"},
	{Name = "Torch", Requires = "1 Wood, 1 Stone"},
	{Name = "Wall", Requires = "3 Wood"},
	{Name = "Wide Wall", Requires = "5 Wood"},
 {Name = "Window Wide Wall", Requires = "5 Wood, 2 Glass"},
 {Name = "Door", Requires = "6 Wood"},
 {Name = "Totem", Requires = "30 Wood"},
 {Name = "Stone Workbench", Requires = "8 Wood, 30 Stone, 4 Glass"},
 {Name = "Building Stone", Requires = "---------------------------------------------"},
 {Name = "Cauldron", Requires = "2 Wood, 15 Stone"},
 {Name = "Stone Chair", Requires = "2 Stone"},
 {Name = "Stone Door", Requires = "6 Stone"},
 {Name = "Stone Ladder", Requires = "5 Stone"},
 {Name = "Stone Table", Requires = "4 Stone"},
 {Name = "Stone Wall", Requires = "3 Stone"},
 {Name = "Stone Wide Wall", Requires = "5 Stone"},
 {Name = "Stone Window Wide Wall", Requires = "5 Stone, 2 Glass"},
} 

--[[
 {Name = "", Requires = ""},
]]

for _, b in ipairs(builds) do
	CTab:CreateButton({
		Name = "Craft " .. b.Name .. " [" .. b.Requires .. "]",
		Callback = function()
			game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("craft"):FireServer(b.Name)
		end
	})
end

-- Section: Items
CTab:CreateSection("Items Wood")
local items = {
	{Name = "Left Leather Pad", Requires = "5 Leather, 3 Cordage"},
	{Name = "Right Leather Pad", Requires = "5 Leather, 3 Cordage"},
 {Name = "Left Wood Kneepad", Requires = "6 Wood, 4 Cordage"},
 {Name = "Right Wood Kneepad", Requires = "6 Wood, 4 Cordage"},
	{Name = "Leather Jacket", Requires = "15 Leather, 10 Cordage"},
	{Name = "Fishing Rod", Requires = "1 Wood, 12 Cordage"},
 {Name = "Wood Pickaxe", Requires = "10 Wood, 3 Cordage"},
 {Name = "Flower Crown", Requires = "1 Wood, 6 Corbage, 6 Flower"},
 {Name = " Items Stone  ", Requires = "---------------------------------------------"},
 {Name = "Makeshift Sickle", Requires = "7 Wood, 4 Stone, 3 Cordage"},
 {Name = "Repair Hammer", Requires = "13 Wood, 5 Stone, 3 Cordage"},
 {Name = "Stone Pickaxe", Requires = "2 Wood, 7 Stone, 3 Cordage"},
 {Name = "Stone Axe", Requires = "2 Wood, 7 Stone, 3 Cordage"},
}

for _, i in ipairs(items) do
	CTab:CreateButton({
		Name = "Craft " .. i.Name .. " [" .. i.Requires .. "]",
		Callback = function()
			game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("craft"):FireServer(i.Name)
		end
	})
end

-- Section: Misc
CTab:CreateSection("Misc")
local items = {
	{Name = "Bonemeal", Requires = "12 Bone"},
}

for _, i in ipairs(items) do
	CTab:CreateButton({
		Name = "Craft " .. i.Name .. " [" .. i.Requires .. "]",
		Callback = function()
			game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("craft"):FireServer(i.Name)
		end
	})
end















local KTab = Window:CreateTab("Misc", "package")
KTab:CreateSection("Player")

local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local speaker = Players.LocalPlayer
local flyjump

KTab:CreateToggle({
	Name = "Inf Jump",
	CurrentValue = false,
	Flag = "InfJumpToggle",
	Callback = function(state)
		if flyjump then
			flyjump:Disconnect()
			flyjump = nil
		end

		if state then
			flyjump = UserInputService.JumpRequest:Connect(function()
				local humanoid = speaker.Character and speaker.Character:FindFirstChildWhichIsA("Humanoid")
				if humanoid then
					humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				end
			end)
		end
	end
})

-- Khai b√°o c√°c d·ªãch v·ª• c·∫ßn thi·∫øt
local PromptService = game:GetService("ProximityPromptService")
local Workspace = game:GetService("Workspace")

-- T·∫°o Toggle ƒë·ªÉ k√≠ch ho·∫°t v√† t·∫Øt ch·ª©c nƒÉng Instant Prompt
local InstantPromptToggle = KTab:CreateToggle({
    Name = "Instant interact",
    CurrentValue = false,  -- M·∫∑c ƒë·ªãnh t·∫Øt
    Callback = function(enabled)
        if enabled then
            -- Khi toggle b·∫≠t, thi·∫øt l·∫≠p t·∫•t c·∫£ ProximityPrompt c√≥ HoldDuration = 0
            for _, v in ipairs(Workspace:GetDescendants()) do
                if v:IsA("ProximityPrompt") then
                    v.HoldDuration = 0
                end
            end
            
            -- T·ª± ƒë·ªông thi·∫øt l·∫≠p HoldDuration = 0 khi c√≥ Prompt m·ªõi b·∫Øt ƒë·∫ßu
            PromptService.PromptButtonHoldBegan:Connect(function(prompt)
                if prompt:IsA("ProximityPrompt") then
                    prompt.HoldDuration = 0
                end
            end)

            Rayfield:Notify({
                Title = "Instant Prompt Enabled",
                Content = "All proximity prompts now require no hold duration.",
                Duration = 2
            })
        else
            -- Khi toggle t·∫Øt, kh√¥ng thay ƒë·ªïi g√¨
            Rayfield:Notify({
                Title = "Instant Prompt Disabled",
                Content = "Proximity prompts will use default hold duration.",
                Duration = 2
            })
        end
    end,
})

local RunService = game:GetService("RunService")
local speaker = game.Players.LocalPlayer
local noclipConnection
local diedConnection

KTab:CreateToggle({
	Name = "Noclip",
	Default = false,
	Flag = "NoclipToggle",
	Callback = function(state)
		if state then
			local char = speaker.Character or speaker.CharacterAdded:Wait()
			local humanoid = char:FindFirstChildOfClass("Humanoid")

			-- K√≠ch ho·∫°t Noclip
			noclipConnection = RunService.Stepped:Connect(function()
				local c = speaker.Character
				if not c then return end
				for _, part in ipairs(c:GetDescendants()) do
					if part:IsA("BasePart") then
						part.CanCollide = false
					end
				end
			end)

			-- N·∫øu ch·∫øt th√¨ t·∫Øt
			if humanoid then
				diedConnection = humanoid.Died:Connect(function()
					if noclipConnection then
						noclipConnection:Disconnect()
						noclipConnection = nil
					end
					if diedConnection then
						diedConnection:Disconnect()
						diedConnection = nil
					end
					-- T·∫Øt n√∫t
					KTab.Flags["NoclipToggle"] = false
				end)
			end
		else
			-- H·ªßy k·∫øt n·ªëi n·∫øu ƒëang b·∫≠t
			if noclipConnection then
				noclipConnection:Disconnect()
				noclipConnection = nil
			end
			if diedConnection then
				diedConnection:Disconnect()
				diedConnection = nil
			end
		end
	end
})

local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")

local brightLoop = nil
local oldLighting = {}

KTab:CreateToggle({
    Name = "Full Bright",
    CurrentValue = false,
    Callback = function(state)
        if state then
            -- üåï L∆∞u th√¥ng s·ªë g·ªëc
            oldLighting = {
                Brightness = Lighting.Brightness,
                ClockTime = Lighting.ClockTime,
                FogEnd = Lighting.FogEnd,
                GlobalShadows = Lighting.GlobalShadows,
                OutdoorAmbient = Lighting.OutdoorAmbient,
            }

            -- üåû B·∫≠t √°nh s√°ng
            local function brightFunc()
                Lighting.Brightness = 2
                Lighting.ClockTime = 14
                Lighting.FogEnd = 100000
                Lighting.GlobalShadows = false
                Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
            end

            brightFunc()
            brightLoop = RunService.RenderStepped:Connect(brightFunc)
        else
            -- üåë T·∫Øt √°nh s√°ng v√† kh√¥i ph·ª•c l·∫°i
            if brightLoop then brightLoop:Disconnect() end

            if oldLighting then
                pcall(function()
                    Lighting.Brightness = oldLighting.Brightness
                    Lighting.ClockTime = oldLighting.ClockTime
                    Lighting.FogEnd = oldLighting.FogEnd
                    Lighting.GlobalShadows = oldLighting.GlobalShadows
                    Lighting.OutdoorAmbient = oldLighting.OutdoorAmbient
                end)
            end
        end
    end
})

KTab:CreateButton({
    Name = "Anti-Void",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/7DayToLive/refs/heads/main/AntiVoid"))()
    end,
})



KTab:CreateSection("Other")


KTab:CreateButton({
    Name = "Eat Button (Full Hungry)",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/7DayToLive/refs/heads/main/EatBerryButton"))()
    end,
})

KTab:CreateButton({
    Name = "Collect Aura",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/Xd/refs/heads/main/CollectAura"))()
    end,
})
  
  KTab:CreateButton({
    Name = "Inf Yield Edit",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/Xd/main/infedit"))()
    end,
  })

KTab:CreateButton({
     Name = "Herkle Hub",
     Callback = function()
         loadstring(game:HttpGet("https://raw.githubusercontent.com/decryp1/Herkle-Hub/refs/heads/main/game%20redirect"))()
     end,
})

KTab:CreateButton({
    Name = "Xomar Hub",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/omaromar242/7-days-Op-omarXwiet-Works/refs/heads/main/.gitignore"))()
task.spawn(function()
if setclipboard then
    setclipboard("wietXomar_Hub") -- thay b·∫±ng n·ªôi dung c·∫ßn copy
    print("Copied Key: wietXomar_Hub!")
else
    warn("Executor not supported setclipboard")
end
end)
    end,
})

KTab:CreateButton({
    Name = "Killaura",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/zamzamzan/test/refs/heads/main/7days'))()
    end,
})

KTab:CreateButton({
    Name = "Dot Aim",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/Xd/refs/heads/main/DotAim"))()
    end,
})

KTab:CreateButton({
Name = "AutoCollectItemsGUI",
Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/idtkby/7DayToLive/main/autocollectitems"))()
end,
})


KTab:CreateSection("Save location")
local originalPos = nil

KTab:CreateButton({
    Name = "Save current location",
    Callback = function()
        local hrp = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            originalPos = hrp.CFrame
            Rayfield:Notify({
                Title = "Original location",
                Content = "Current location saved",
                Duration = 2
            })
        end
    end,
})

KTab:CreateButton({
    Name = "Return to original position",
    Callback = function()
        local hrp = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if originalPos and hrp then
            hrp.CFrame = originalPos
            Rayfield:Notify({
                Title = "Teleport",
                Content = "Teleported to saved location",
                Duration = 2
            })
        end
    end,
})
  
end)
















task.wait(1) -- ƒê·ª£i Rayfield load ho√†n t·∫•t
local function applyFontToRayfieldFonts()
    for _, gui in pairs(game:GetService("CoreGui"):GetDescendants()) do
        if gui:IsA("TextLabel") or gui:IsA("TextButton") or gui:IsA("TextBox") then
            pcall(function()
                gui.Font = Enum.Font.Bodoni
            end)
        end
    end
end

applyFontToRayfieldFonts()







